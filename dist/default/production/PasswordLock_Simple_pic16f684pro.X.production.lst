

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Tue Jul 26 10:00:39 2022

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F684
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,delta=2
    12                           	psect	text400,local,class=CODE,delta=2
    13                           	psect	text401,local,class=CODE,delta=2
    14                           	psect	text402,local,class=CODE,delta=2
    15                           	psect	text403,local,class=CODE,delta=2
    16                           	psect	text404,local,class=CODE,delta=2
    17                           	psect	text405,local,class=CODE,delta=2
    18                           	psect	text406,local,class=CODE,delta=2
    19                           	psect	text407,local,class=CODE,delta=2
    20                           	psect	text408,local,class=CODE,delta=2
    21                           	psect	text409,local,class=CODE,delta=2
    22                           	psect	text410,local,class=CODE,delta=2
    23                           	psect	text411,local,class=CODE,delta=2
    24                           	psect	text412,local,class=CODE,delta=2
    25                           	psect	text413,local,class=CODE,delta=2
    26                           	psect	text414,local,class=CODE,delta=2
    27                           	psect	text415,local,class=CODE,delta=2
    28                           	psect	text416,local,class=CODE,delta=2
    29                           	psect	text417,local,class=CODE,delta=2
    30                           	psect	pa_nodes,global,class=CODE,delta=2
    31                           	dabs	1,0x7E,2
    32  000A                     	;#
    33                           
    34                           	psect	config
    35  2007  01A4               	dw	420	;#
    36                           
    37                           	psect	idataBANK0
    38  0000                     __pidataBANK0:	
    39  001F                     _ADCON0	set	31
    40  0019                     _CMCON0	set	25
    41  0005                     _PORTAbits	set	5
    42  0007                     _PORTCbits	set	7
    43  0091                     _ANSELbits	set	145
    44  0085                     _TRISAbits	set	133
    45  0087                     _TRISCbits	set	135
    46  0095                     _WPU	set	149
    47                           
    48                           	psect	cinit
    49  0611                     start_initialization:	
    50  0611  3020               	movlw	low __pbssBANK0
    51                           
    52                           ; Clear objects allocated to BANK0
    53  0612  1383               	bcf	3,7	;select IRP bank0
    54  0613  0084               	movwf	4
    55  0614  3031               	movlw	low (__pbssBANK0+17)
    56  0615  25F4               	fcall	clear_ram
    57                           
    58                           ;initializer for RunCheck_Mode@k0
    59  0616  30FF               	movlw	255
    60  0617  00B1               	movwf	__pdataBANK0& (0+127)
    61                           
    62                           ;initializer for RunCheck_Mode@k1
    63  0618  00B2               	movwf	(__pdataBANK0+1)& (0+127)
    64                           
    65                           ;initializer for RunCheck_Mode@k2
    66  0619  00B3               	movwf	(__pdataBANK0+2)& (0+127)
    67  061A                     end_of_initialization:	
    68                           ;End of C runtime variable initialization code
    69                           
    70  061A  0183               	clrf	3
    71  061B  2EC1               	ljmp	_main	;jump to C main() function
    72                           
    73                           	psect	bssBANK0
    74  0020                     __pbssBANK0:	
    75  0020                     _run_t:	
    76  0020                     	ds	9
    77  0029                     RunCheck_Mode@key:	
    78  0029                     	ds	1
    79  002A                     RunCheck_Mode@number:	
    80  002A                     	ds	1
    81  002B                     RunCheck_Mode@spec:	
    82  002B                     	ds	1
    83  002C                     _n0:	
    84  002C                     	ds	1
    85  002D                     _n1:	
    86  002D                     	ds	1
    87  002E                     _n2:	
    88  002E                     	ds	1
    89  002F                     _SC_Data:	
    90  002F                     	ds	2
    91                           
    92                           	psect	dataBANK0
    93  0031                     __pdataBANK0:	
    94  0031                     RunCheck_Mode@k0:	
    95  0031                     	ds	1
    96  0032                     RunCheck_Mode@k1:	
    97  0032                     	ds	1
    98  0033                     RunCheck_Mode@k2:	
    99  0033                     	ds	1
   100                           
   101                           	psect	clrtext
   102  05F4                     clear_ram:	
   103                           ;	Called with FSR containing the base address, and
   104                           ;	W with the last address+1
   105                           
   106  05F4  0064               	clrwdt	;clear the watchdog before getting into this loop
   107  05F5                     clrloop:	
   108  05F5  0180               	clrf	0	;clear RAM location pointed to by FSR
   109  05F6  0A84               	incf	4,f	;increment pointer
   110  05F7  0604               	xorwf	4,w	;XOR with final address
   111  05F8  1903               	btfsc	3,2	;have we reached the end yet?
   112  05F9  3400               	retlw	0	;all done for this memory range, return
   113  05FA  0604               	xorwf	4,w	;XOR again to restore value
   114  05FB  2DF5               	goto	clrloop	;do the next byte
   115                           
   116                           	psect	cstackCOMMON
   117  0070                     __pcstackCOMMON:	
   118  0070                     ?_LED_Init:	
   119  0070                     ??_LED_Init:	
   120                           ; 0 bytes @ 0x0
   121                           
   122  0070                     ?_BUZZER_Init:	
   123                           ; 0 bytes @ 0x0
   124                           
   125  0070                     ??_BUZZER_Init:	
   126                           ; 0 bytes @ 0x0
   127                           
   128  0070                     ?_BUZZER_KeySound:	
   129                           ; 0 bytes @ 0x0
   130                           
   131  0070                     ??_BUZZER_KeySound:	
   132                           ; 0 bytes @ 0x0
   133                           
   134  0070                     ?_SC12B_Init_Function:	
   135                           ; 0 bytes @ 0x0
   136                           
   137  0070                     ??_SC12B_Init_Function:	
   138                           ; 0 bytes @ 0x0
   139                           
   140  0070                     ?_I2C_Delay:	
   141                           ; 0 bytes @ 0x0
   142                           
   143  0070                     ??_I2C_Delay:	
   144                           ; 0 bytes @ 0x0
   145                           
   146  0070                     ?_I2C_Start:	
   147                           ; 0 bytes @ 0x0
   148                           
   149  0070                     ?_I2C_Stop:	
   150                           ; 0 bytes @ 0x0
   151                           
   152  0070                     ?_I2C_Respond:	
   153                           ; 0 bytes @ 0x0
   154                           
   155  0070                     ?_RunCheck_Mode:	
   156                           ; 0 bytes @ 0x0
   157                           
   158  0070                     ?_Buzzer_Sound:	
   159                           ; 0 bytes @ 0x0
   160                           
   161  0070                     ?_BackLight_Fun:	
   162                           ; 0 bytes @ 0x0
   163                           
   164  0070                     ??_BackLight_Fun:	
   165                           ; 0 bytes @ 0x0
   166                           
   167  0070                     ?_ADC_Init:	
   168                           ; 0 bytes @ 0x0
   169                           
   170  0070                     ??_ADC_Init:	
   171                           ; 0 bytes @ 0x0
   172                           
   173  0070                     ?_System_Init:	
   174                           ; 0 bytes @ 0x0
   175                           
   176  0070                     ??_System_Init:	
   177                           ; 0 bytes @ 0x0
   178                           
   179  0070                     ?_Motor_Init:	
   180                           ; 0 bytes @ 0x0
   181                           
   182  0070                     ??_Motor_Init:	
   183                           ; 0 bytes @ 0x0
   184                           
   185  0070                     ?_main:	
   186                           ; 0 bytes @ 0x0
   187                           
   188  0070                     ?_SendByteAndGetNACK:	
   189                           ; 0 bytes @ 0x0
   190                           
   191  0070                     ?_I2C_Receive8Bit:	
   192                           ; 1 bytes @ 0x0
   193                           
   194  0070                     I2C_Delay@a:	
   195                           ; 1 bytes @ 0x0
   196                           
   197  0070                     RunCheck_Mode@dat:	
   198                           ; 1 bytes @ 0x0
   199                           
   200                           
   201                           ; 2 bytes @ 0x0
   202  0070                     	ds	1
   203  0071                     ??_I2C_Start:	
   204  0071                     ??_I2C_Stop:	
   205                           ; 0 bytes @ 0x1
   206                           
   207  0071                     ??_SendByteAndGetNACK:	
   208                           ; 0 bytes @ 0x1
   209                           
   210  0071                     ??_I2C_Respond:	
   211                           ; 0 bytes @ 0x1
   212                           
   213  0071                     ??_I2C_Receive8Bit:	
   214                           ; 0 bytes @ 0x1
   215                           
   216  0071                     I2C_Respond@ACKSignal:	
   217                           ; 0 bytes @ 0x1
   218                           
   219  0071                     BUZZER_KeySound@m:	
   220                           ; 1 bytes @ 0x1
   221                           
   222                           
   223                           ; 2 bytes @ 0x1
   224  0071                     	ds	1
   225  0072                     ??_RunCheck_Mode:	
   226  0072                     I2C_Receive8Bit@i:	
   227                           ; 0 bytes @ 0x2
   228                           
   229                           
   230                           ; 1 bytes @ 0x2
   231  0072                     	ds	1
   232  0073                     ??_Buzzer_Sound:	
   233  0073                     SendByteAndGetNACK@dataToSend:	
   234                           ; 0 bytes @ 0x3
   235                           
   236  0073                     I2C_Receive8Bit@buffer:	
   237                           ; 1 bytes @ 0x3
   238                           
   239                           
   240                           ; 1 bytes @ 0x3
   241  0073                     	ds	1
   242  0074                     SendByteAndGetNACK@i:	
   243                           
   244                           ; 1 bytes @ 0x4
   245  0074                     	ds	1
   246  0075                     ?_I2C_Simple_Read_From_Device:	
   247  0075                     I2C_Simple_Read_From_Device@target:	
   248                           ; 1 bytes @ 0x5
   249                           
   250                           
   251                           ; 1 bytes @ 0x5
   252  0075                     	ds	1
   253  0076                     I2C_Simple_Read_From_Device@len:	
   254  0076                     Buzzer_Sound@i:	
   255                           ; 1 bytes @ 0x6
   256                           
   257                           
   258                           ; 1 bytes @ 0x6
   259  0076                     	ds	1
   260  0077                     ??_I2C_Simple_Read_From_Device:	
   261                           
   262                           ; 0 bytes @ 0x7
   263  0077                     	ds	2
   264  0079                     I2C_Simple_Read_From_Device@deviceAddr:	
   265                           
   266                           ; 1 bytes @ 0x9
   267  0079                     	ds	1
   268  007A                     I2C_Simple_Read_From_Device@p:	
   269                           
   270                           ; 1 bytes @ 0xA
   271  007A                     	ds	1
   272  007B                     I2C_Simple_Read_From_Device@i:	
   273                           
   274                           ; 1 bytes @ 0xB
   275  007B                     	ds	1
   276  007C                     ??_main:	
   277  007C                     main@KeyValue:	
   278                           ; 0 bytes @ 0xC
   279                           
   280                           
   281                           ; 2 bytes @ 0xC
   282  007C                     	ds	2
   283                           
   284                           	psect	maintext
   285  06C1                     __pmaintext:	
   286 ;;Data sizes: Strings 0, constant 0, data 3, bss 17, persistent 0 stack 0
   287 ;;Auto spaces:   Size  Autos    Used
   288 ;; COMMON          14     14      14
   289 ;; BANK0           80      0      20
   290 ;; BANK1           32      0       0
   291 ;;
   292 ;; Pointer list with targets:
   293 ;; I2C_Simple_Read_From_Device@target	PTR unsigned char  size(1) Largest target is 2
   294 ;;		 -> SC_Data(BANK0[2]), 
   295 ;;
   296 ;; I2C_Simple_Read_From_Device@p	PTR unsigned char  size(1) Largest target is 2
   297 ;;		 -> SC_Data(BANK0[2]), 
   298 ;;
   299 ;;
   300 ;; Critical Paths under _main in COMMON
   301 ;;
   302 ;;   _main->_I2C_Simple_Read_From_Device
   303 ;;   _Buzzer_Sound->_BUZZER_KeySound
   304 ;;   _I2C_Simple_Read_From_Device->_SendByteAndGetNACK
   305 ;;   _I2C_Receive8Bit->_I2C_Delay
   306 ;;   _I2C_Respond->_I2C_Delay
   307 ;;   _SendByteAndGetNACK->_I2C_Delay
   308 ;;   _I2C_Stop->_I2C_Delay
   309 ;;   _I2C_Start->_I2C_Delay
   310 ;;
   311 ;; Critical Paths under _main in BANK0
   312 ;;
   313 ;;   None.
   314 ;;
   315 ;; Critical Paths under _main in BANK1
   316 ;;
   317 ;;   None.
   318 ;;
   319 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   320 ;;
   321 ;;
   322 ;;Call Graph Tables:
   323 ;;
   324 ;; ---------------------------------------------------------------------------------
   325 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   326 ;; ---------------------------------------------------------------------------------
   327 ;; (0) _main                                                 6     6      0     709
   328 ;;                                             12 COMMON     2     2      0
   329 ;;                _SC12B_Init_Function
   330 ;;                         _Motor_Init
   331 ;;                           _ADC_Init
   332 ;;                        _System_Init
   333 ;;        _I2C_Simple_Read_From_Device
   334 ;;                      _RunCheck_Mode
   335 ;;                      _BackLight_Fun
   336 ;;                       _Buzzer_Sound
   337 ;; ---------------------------------------------------------------------------------
   338 ;; (1) _Buzzer_Sound                                         4     4      0      70
   339 ;;                                              3 COMMON     4     4      0
   340 ;;                    _BUZZER_KeySound
   341 ;; ---------------------------------------------------------------------------------
   342 ;; (1) _I2C_Simple_Read_From_Device                          7     5      2     594
   343 ;;                                              5 COMMON     7     5      2
   344 ;;                          _I2C_Start
   345 ;;                 _SendByteAndGetNACK
   346 ;;                           _I2C_Stop
   347 ;;                    _I2C_Receive8Bit
   348 ;;                        _I2C_Respond
   349 ;; ---------------------------------------------------------------------------------
   350 ;; (1) _System_Init                                          0     0      0       0
   351 ;;                           _LED_Init
   352 ;;                        _BUZZER_Init
   353 ;; ---------------------------------------------------------------------------------
   354 ;; (2) _I2C_Receive8Bit                                      3     3      0     138
   355 ;;                                              1 COMMON     3     3      0
   356 ;;                          _I2C_Delay
   357 ;; ---------------------------------------------------------------------------------
   358 ;; (2) _I2C_Respond                                          1     1      0      68
   359 ;;                                              1 COMMON     1     1      0
   360 ;;                          _I2C_Delay
   361 ;; ---------------------------------------------------------------------------------
   362 ;; (2) _SendByteAndGetNACK                                   4     4      0     138
   363 ;;                                              1 COMMON     4     4      0
   364 ;;                          _I2C_Delay
   365 ;; ---------------------------------------------------------------------------------
   366 ;; (2) _I2C_Stop                                             0     0      0      46
   367 ;;                          _I2C_Delay
   368 ;; ---------------------------------------------------------------------------------
   369 ;; (2) _I2C_Start                                            0     0      0      46
   370 ;;                          _I2C_Delay
   371 ;; ---------------------------------------------------------------------------------
   372 ;; (2) _BUZZER_KeySound                                      3     3      0      46
   373 ;;                                              0 COMMON     3     3      0
   374 ;; ---------------------------------------------------------------------------------
   375 ;; (1) _Motor_Init                                           0     0      0       0
   376 ;; ---------------------------------------------------------------------------------
   377 ;; (2) _LED_Init                                             0     0      0       0
   378 ;; ---------------------------------------------------------------------------------
   379 ;; (1) _ADC_Init                                             0     0      0       0
   380 ;; ---------------------------------------------------------------------------------
   381 ;; (1) _BackLight_Fun                                        0     0      0       0
   382 ;; ---------------------------------------------------------------------------------
   383 ;; (1) _RunCheck_Mode                                        3     1      2      22
   384 ;;                                              0 COMMON     2     0      2
   385 ;; ---------------------------------------------------------------------------------
   386 ;; (3) _I2C_Delay                                            1     1      0      46
   387 ;;                                              0 COMMON     1     1      0
   388 ;; ---------------------------------------------------------------------------------
   389 ;; (1) _SC12B_Init_Function                                  0     0      0       0
   390 ;; ---------------------------------------------------------------------------------
   391 ;; (2) _BUZZER_Init                                          0     0      0       0
   392 ;; ---------------------------------------------------------------------------------
   393 ;; Estimated maximum stack depth 3
   394 ;; ---------------------------------------------------------------------------------
   395 ;; Call Graph Graphs:
   396 ;; _main (ROOT)
   397 ;;   _SC12B_Init_Function
   398 ;;   _Motor_Init
   399 ;;   _ADC_Init
   400 ;;   _System_Init
   401 ;;     _LED_Init
   402 ;;     _BUZZER_Init
   403 ;;   _I2C_Simple_Read_From_Device
   404 ;;     _I2C_Start
   405 ;;       _I2C_Delay
   406 ;;     _SendByteAndGetNACK
   407 ;;       _I2C_Delay
   408 ;;     _I2C_Stop
   409 ;;       _I2C_Delay
   410 ;;     _I2C_Receive8Bit
   411 ;;       _I2C_Delay
   412 ;;     _I2C_Respond
   413 ;;       _I2C_Delay
   414 ;;   _RunCheck_Mode
   415 ;;   _BackLight_Fun
   416 ;;   _Buzzer_Sound
   417 ;;     _BUZZER_KeySound
   418 ;;
   419 ;; Address spaces:
   420 ;;Name               Size   Autos  Total    Cost      Usage
   421 ;;SFR1                 0      0       0       2        0.0%
   422 ;;BITSFR1              0      0       0       2        0.0%
   423 ;;BANK1               20      0       0       5        0.0%
   424 ;;BITBANK1            20      0       0       7        0.0%
   425 ;;CODE                 0      0       0       0        0.0%
   426 ;;DATA                 0      0      25       8        0.0%
   427 ;;ABS                  0      0      22       6        0.0%
   428 ;;NULL                 0      0       0       0        0.0%
   429 ;;STACK                0      0       3       2        0.0%
   430 ;;BANK0               50      0      14       4       25.0%
   431 ;;BITBANK0            50      0       0       3        0.0%
   432 ;;SFR0                 0      0       0       1        0.0%
   433 ;;BITSFR0              0      0       0       1        0.0%
   434 ;;COMMON               E      E       E       1      100.0%
   435 ;;BITCOMMON            E      0       0       0        0.0%
   436 ;;EEDATA             100      0       0       0        0.0%
   437                           
   438                           
   439 ;; *************** function _main *****************
   440 ;; Defined at:
   441 ;;		line 20 in file "main.c"
   442 ;; Parameters:    Size  Location     Type
   443 ;;		None
   444 ;; Auto vars:     Size  Location     Type
   445 ;;  KeyValue        2   12[COMMON] unsigned int 
   446 ;;  adc             2    0        unsigned int 
   447 ;;  k               1    0        unsigned char 
   448 ;;  resetKey        1    0        unsigned char 
   449 ;; Return value:  Size  Location     Type
   450 ;;		None               void
   451 ;; Registers used:
   452 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   453 ;; Tracked objects:
   454 ;;		On entry : 17F/0
   455 ;;		On exit  : 0/0
   456 ;;		Unchanged: 0/0
   457 ;; Data sizes:     COMMON   BANK0   BANK1
   458 ;;      Params:         0       0       0
   459 ;;      Locals:         2       0       0
   460 ;;      Temps:          0       0       0
   461 ;;      Totals:         2       0       0
   462 ;;Total ram usage:        2 bytes
   463 ;; Hardware stack levels required when called:    3
   464 ;; This function calls:
   465 ;;		_SC12B_Init_Function
   466 ;;		_Motor_Init
   467 ;;		_ADC_Init
   468 ;;		_System_Init
   469 ;;		_I2C_Simple_Read_From_Device
   470 ;;		_RunCheck_Mode
   471 ;;		_BackLight_Fun
   472 ;;		_Buzzer_Sound
   473 ;; This function is called by:
   474 ;;		Startup code after reset
   475 ;; This function uses a non-reentrant model
   476 ;;
   477  06C1                     _main:	
   478                           
   479                           ;main.c: 22: unsigned char resetKey,k;
   480                           ;main.c: 23: unsigned int KeyValue,adc;
   481                           ;main.c: 25: SC12B_Init_Function();
   482                           
   483                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   484  06C1  25E8               	fcall	_SC12B_Init_Function
   485                           
   486                           ;main.c: 27: Motor_Init();
   487  06C2  2606               	fcall	_Motor_Init
   488                           
   489                           ;main.c: 29: ADC_Init();
   490  06C3  25FC               	fcall	_ADC_Init
   491                           
   492                           ;main.c: 30: System_Init();
   493  06C4  25E1               	fcall	_System_Init
   494                           
   495                           ;main.c: 33: run_t.changePassword=0;
   496  06C5  01A1               	clrf	_run_t+1
   497                           
   498                           ;main.c: 35: run_t.eepromAddress=0;
   499  06C6  01A3               	clrf	_run_t+3
   500  06C7                     l6566:	
   501                           
   502                           ;main.c: 37: {
   503                           ;main.c: 45: if(run_t.passswordsMatch==0){
   504  06C7  1283               	bcf	3,5	;RP0=0, select bank0
   505  06C8  08A7               	movf	_run_t+7,f
   506  06C9  1D03               	skipz
   507  06CA  2EDD               	goto	l6574
   508                           
   509                           ;main.c: 46: if(I2C_Simple_Read_From_Device(0x40,SC_Data,2)==DONE){
   510  06CB  302F               	movlw	_SC_Data& (0+255)
   511  06CC  00F5               	movwf	?_I2C_Simple_Read_From_Device
   512  06CD  3002               	movlw	2
   513  06CE  00F6               	movwf	?_I2C_Simple_Read_From_Device+1
   514  06CF  3040               	movlw	64
   515  06D0  26E3               	fcall	_I2C_Simple_Read_From_Device
   516  06D1  3A01               	xorlw	1
   517  06D2  1D03               	skipz
   518  06D3  2EDD               	goto	l6574
   519                           
   520                           ;main.c: 48: KeyValue =(unsigned int)(SC_Data[0]<<8) + SC_Data[1];
   521  06D4  082F               	movf	_SC_Data,w
   522  06D5  00FD               	movwf	main@KeyValue+1
   523  06D6  0830               	movf	_SC_Data+1,w
   524  06D7  00FC               	movwf	main@KeyValue
   525                           
   526                           ;main.c: 51: RunCheck_Mode(KeyValue);
   527  06D8  087D               	movf	main@KeyValue+1,w
   528  06D9  00F1               	movwf	?_RunCheck_Mode+1
   529  06DA  087C               	movf	main@KeyValue,w
   530  06DB  00F0               	movwf	?_RunCheck_Mode
   531  06DC  274B               	fcall	_RunCheck_Mode
   532  06DD                     l6574:	
   533                           
   534                           ;main.c: 54: }
   535                           ;main.c: 57: }
   536                           ;main.c: 58: if(run_t.passswordsMatch ==1){
   537  06DD  0B27               	decfsz	_run_t+7,w
   538  06DE  2EE0               	goto	l6578
   539                           
   540                           ;main.c: 72: run_t.passswordsMatch=0;
   541  06DF  01A7               	clrf	_run_t+7
   542  06E0                     l6578:	
   543                           
   544                           ;main.c: 74: }
   545                           ;main.c: 78: BackLight_Fun();
   546  06E0  2635               	fcall	_BackLight_Fun
   547                           
   548                           ;main.c: 80: Buzzer_Sound();
   549  06E1  2686               	fcall	_Buzzer_Sound
   550  06E2  2EC7               	goto	l6566
   551  06E3                     __end_of_main:	
   552                           
   553                           	psect	text400
   554  0686                     __ptext400:	
   555 ;; =============== function _main ends ============
   556                           
   557                           
   558 ;; *************** function _Buzzer_Sound *****************
   559 ;; Defined at:
   560 ;;		line 835 in file "hardware/src/run.c"
   561 ;; Parameters:    Size  Location     Type
   562 ;;		None
   563 ;; Auto vars:     Size  Location     Type
   564 ;;  i               1    6[COMMON] unsigned char 
   565 ;; Return value:  Size  Location     Type
   566 ;;		None               void
   567 ;; Registers used:
   568 ;;		wreg, status,2, status,0, pclath, cstack
   569 ;; Tracked objects:
   570 ;;		On entry : 20/0
   571 ;;		On exit  : 0/0
   572 ;;		Unchanged: 0/0
   573 ;; Data sizes:     COMMON   BANK0   BANK1
   574 ;;      Params:         0       0       0
   575 ;;      Locals:         1       0       0
   576 ;;      Temps:          3       0       0
   577 ;;      Totals:         4       0       0
   578 ;;Total ram usage:        4 bytes
   579 ;; Hardware stack levels used:    1
   580 ;; Hardware stack levels required when called:    1
   581 ;; This function calls:
   582 ;;		_BUZZER_KeySound
   583 ;; This function is called by:
   584 ;;		_main
   585 ;; This function uses a non-reentrant model
   586 ;;
   587  0686                     _Buzzer_Sound:	
   588                           
   589                           ;run.c: 836: unsigned char i;
   590                           ;run.c: 838: if(run_t.buzzer_flag ==1 ){
   591                           
   592                           ; Regs used in _Buzzer_Sound: [wreg+status,2+status,0+pclath+cstack]
   593  0686  0B25               	decfsz	_run_t+5,w
   594  0687  2E8D               	goto	l1852
   595                           
   596                           ;run.c: 840: run_t.buzzer_flag=0;
   597  0688  01A5               	clrf	_run_t+5
   598                           
   599                           ;run.c: 843: BUZZER_KeySound();
   600  0689  26A3               	fcall	_BUZZER_KeySound
   601                           
   602                           ;run.c: 845: i=1;
   603  068A  01F6               	clrf	Buzzer_Sound@i
   604  068B  0AF6               	incf	Buzzer_Sound@i,f
   605                           
   606                           ;run.c: 847: }
   607  068C  2E8E               	goto	l6546
   608  068D                     l1852:	
   609                           
   610                           ;run.c: 848: else{
   611                           ;run.c: 851: (PORTCbits.RC5= 0) ;
   612  068D  1287               	bcf	7,5	;volatile
   613  068E                     l6546:	
   614                           
   615                           ;run.c: 852: }
   616                           ;run.c: 856: if(i==1){
   617  068E  0376               	decf	Buzzer_Sound@i,w
   618  068F  1D03               	skipz
   619  0690  0008               	return
   620                           
   621                           ;run.c: 858: _delay((unsigned long)((300)*(4000000/4000.0)));
   622  0691  3002               	movlw	2
   623  0692  00F5               	movwf	??_Buzzer_Sound+2
   624  0693  3086               	movlw	134
   625  0694  00F4               	movwf	??_Buzzer_Sound+1
   626  0695  3099               	movlw	153
   627  0696  00F3               	movwf	??_Buzzer_Sound
   628  0697                     u757:	
   629  0697  0BF3               	decfsz	??_Buzzer_Sound,f
   630  0698  2E97               	goto	u757
   631  0699  0BF4               	decfsz	??_Buzzer_Sound+1,f
   632  069A  2E97               	goto	u757
   633  069B  0BF5               	decfsz	??_Buzzer_Sound+2,f
   634  069C  2E97               	goto	u757
   635                           
   636                           ;run.c: 859: n0++;
   637  069D  1283               	bcf	3,5	;RP0=0, select bank0
   638  069E  0AAC               	incf	_n0,f
   639                           
   640                           ;run.c: 860: n1++;
   641  069F  0AAD               	incf	_n1,f
   642                           
   643                           ;run.c: 861: n2++;
   644  06A0  0AAE               	incf	_n2,f
   645                           
   646                           ;run.c: 866: run_t.passswordsMatch =0;
   647  06A1  01A7               	clrf	_run_t+7
   648  06A2  0008               	return
   649  06A3                     __end_of_Buzzer_Sound:	
   650                           
   651                           	psect	text401
   652  06E3                     __ptext401:	
   653 ;; =============== function _Buzzer_Sound ends ============
   654                           
   655                           
   656 ;; *************** function _I2C_Simple_Read_From_Device *****************
   657 ;; Defined at:
   658 ;;		line 227 in file "hardware/src/key.c"
   659 ;; Parameters:    Size  Location     Type
   660 ;;  deviceAddr      1    wreg     unsigned char 
   661 ;;  target          1    5[COMMON] PTR unsigned char 
   662 ;;		 -> SC_Data(2), 
   663 ;;  len             1    6[COMMON] unsigned char 
   664 ;; Auto vars:     Size  Location     Type
   665 ;;  deviceAddr      1    9[COMMON] unsigned char 
   666 ;;  i               1   11[COMMON] unsigned char 
   667 ;;  p               1   10[COMMON] PTR unsigned char 
   668 ;;		 -> SC_Data(2), 
   669 ;; Return value:  Size  Location     Type
   670 ;;                  1    wreg      enum E1107
   671 ;; Registers used:
   672 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   673 ;; Tracked objects:
   674 ;;		On entry : 20/0
   675 ;;		On exit  : 20/0
   676 ;;		Unchanged: FFE00/0
   677 ;; Data sizes:     COMMON   BANK0   BANK1
   678 ;;      Params:         2       0       0
   679 ;;      Locals:         3       0       0
   680 ;;      Temps:          2       0       0
   681 ;;      Totals:         7       0       0
   682 ;;Total ram usage:        7 bytes
   683 ;; Hardware stack levels used:    1
   684 ;; Hardware stack levels required when called:    2
   685 ;; This function calls:
   686 ;;		_I2C_Start
   687 ;;		_SendByteAndGetNACK
   688 ;;		_I2C_Stop
   689 ;;		_I2C_Receive8Bit
   690 ;;		_I2C_Respond
   691 ;; This function is called by:
   692 ;;		_main
   693 ;; This function uses a non-reentrant model
   694 ;;
   695  06E3                     _I2C_Simple_Read_From_Device:	
   696                           
   697                           ; Regs used in _I2C_Simple_Read_From_Device: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   698                           ;I2C_Simple_Read_From_Device@deviceAddr stored from wreg
   699  06E3  00F9               	movwf	I2C_Simple_Read_From_Device@deviceAddr
   700                           
   701                           ;key.c: 228: unsigned char i;
   702                           ;key.c: 229: unsigned char *p;
   703                           ;key.c: 230: p = target;
   704  06E4  0875               	movf	I2C_Simple_Read_From_Device@target,w
   705  06E5  00FA               	movwf	I2C_Simple_Read_From_Device@p
   706                           
   707                           ;key.c: 231: I2C_Start();
   708  06E6  2628               	fcall	_I2C_Start
   709                           
   710                           ;key.c: 232: if (SendByteAndGetNACK((deviceAddr<<1) | 0x01)) {
   711  06E7  1403               	setc
   712  06E8  0D79               	rlf	I2C_Simple_Read_From_Device@deviceAddr,w
   713  06E9  2711               	fcall	_SendByteAndGetNACK
   714  06EA  3A00               	xorlw	0
   715  06EB  1903               	skipnz
   716  06EC  2EEF               	goto	l6516
   717                           
   718                           ;key.c: 233: I2C_Stop();
   719  06ED  261C               	fcall	_I2C_Stop
   720                           
   721                           ;key.c: 234: return UNDONE;
   722  06EE  3400               	retlw	0
   723  06EF                     l6516:	
   724                           
   725                           ;key.c: 235: }
   726                           ;key.c: 236: for(i = 0; i < len; i++)
   727  06EF  01FB               	clrf	I2C_Simple_Read_From_Device@i
   728  06F0                     l6530:	
   729  06F0  0876               	movf	I2C_Simple_Read_From_Device@len,w
   730  06F1  027B               	subwf	I2C_Simple_Read_From_Device@i,w
   731  06F2  1803               	btfsc	3,0
   732  06F3  2F0F               	goto	l6532
   733                           
   734                           ;key.c: 237: {
   735                           ;key.c: 238: *p= I2C_Receive8Bit();
   736  06F4  087A               	movf	I2C_Simple_Read_From_Device@p,w
   737  06F5  0084               	movwf	4
   738  06F6  266C               	fcall	_I2C_Receive8Bit
   739  06F7  1383               	bcf	3,7	;select IRP bank0
   740  06F8  0080               	movwf	0
   741                           
   742                           ;key.c: 239: p++;
   743  06F9  0AFA               	incf	I2C_Simple_Read_From_Device@p,f
   744                           
   745                           ;key.c: 240: if(i < len-1)
   746  06FA  0876               	movf	I2C_Simple_Read_From_Device@len,w
   747  06FB  3EFF               	addlw	255
   748  06FC  00F7               	movwf	??_I2C_Simple_Read_From_Device
   749  06FD  30FF               	movlw	255
   750  06FE  1803               	skipnc
   751  06FF  3000               	movlw	0
   752  0700  00F8               	movwf	??_I2C_Simple_Read_From_Device+1
   753  0701  3A80               	xorlw	128
   754  0702  3C80               	sublw	128
   755  0703  1D03               	skipz
   756  0704  2F07               	goto	u685
   757  0705  0877               	movf	??_I2C_Simple_Read_From_Device,w
   758  0706  027B               	subwf	I2C_Simple_Read_From_Device@i,w
   759  0707                     u685:	
   760  0707  1803               	skipnc
   761  0708  2F0B               	goto	l6526
   762                           
   763                           ;key.c: 241: I2C_Respond(0);
   764  0709  3000               	movlw	0
   765  070A  2F0C               	goto	L1
   766  070B                     l6526:	
   767                           
   768                           ;key.c: 242: else
   769                           ;key.c: 243: I2C_Respond(1);
   770  070B  3001               	movlw	1
   771  070C                     L1:	
   772  070C  2646               	fcall	_I2C_Respond
   773  070D  0AFB               	incf	I2C_Simple_Read_From_Device@i,f
   774  070E  2EF0               	goto	l6530
   775  070F                     l6532:	
   776                           
   777                           ;key.c: 244: }
   778                           ;key.c: 245: I2C_Stop();
   779  070F  261C               	fcall	_I2C_Stop
   780                           
   781                           ;key.c: 246: return DONE;
   782  0710  3401               	retlw	1
   783  0711                     __end_of_I2C_Simple_Read_From_Device:	
   784                           
   785                           	psect	text402
   786  05E1                     __ptext402:	
   787 ;; =============== function _I2C_Simple_Read_From_Device ends ============
   788                           
   789                           
   790 ;; *************** function _System_Init *****************
   791 ;; Defined at:
   792 ;;		line 6 in file "hardware/src/led.c"
   793 ;; Parameters:    Size  Location     Type
   794 ;;		None
   795 ;; Auto vars:     Size  Location     Type
   796 ;;		None
   797 ;; Return value:  Size  Location     Type
   798 ;;		None               void
   799 ;; Registers used:
   800 ;;		wreg, status,2, status,0, pclath, cstack
   801 ;; Tracked objects:
   802 ;;		On entry : 17F/0
   803 ;;		On exit  : 17F/0
   804 ;;		Unchanged: FFE80/0
   805 ;; Data sizes:     COMMON   BANK0   BANK1
   806 ;;      Params:         0       0       0
   807 ;;      Locals:         0       0       0
   808 ;;      Temps:          0       0       0
   809 ;;      Totals:         0       0       0
   810 ;;Total ram usage:        0 bytes
   811 ;; Hardware stack levels used:    1
   812 ;; Hardware stack levels required when called:    1
   813 ;; This function calls:
   814 ;;		_LED_Init
   815 ;;		_BUZZER_Init
   816 ;; This function is called by:
   817 ;;		_main
   818 ;; This function uses a non-reentrant model
   819 ;;
   820  05E1                     _System_Init:	
   821                           
   822                           ;led.c: 7: LED_Init();
   823                           
   824                           ; Regs used in _System_Init: [wreg+status,2+status,0+pclath+cstack]
   825  05E1  2658               	fcall	_LED_Init
   826                           
   827                           ;led.c: 8: BUZZER_Init();
   828  05E2  2DE3               	ljmp	l6162
   829  05E3                     __end_of_System_Init:	
   830                           
   831                           	psect	text403
   832  066C                     __ptext403:	
   833 ;; =============== function _System_Init ends ============
   834                           
   835                           
   836 ;; *************** function _I2C_Receive8Bit *****************
   837 ;; Defined at:
   838 ;;		line 128 in file "hardware/src/key.c"
   839 ;; Parameters:    Size  Location     Type
   840 ;;		None
   841 ;; Auto vars:     Size  Location     Type
   842 ;;  buffer          1    3[COMMON] unsigned char 
   843 ;;  i               1    2[COMMON] unsigned char 
   844 ;; Return value:  Size  Location     Type
   845 ;;                  1    wreg      unsigned char 
   846 ;; Registers used:
   847 ;;		wreg, status,2, status,0, pclath, cstack
   848 ;; Tracked objects:
   849 ;;		On entry : 20/0
   850 ;;		On exit  : 20/0
   851 ;;		Unchanged: FFE00/0
   852 ;; Data sizes:     COMMON   BANK0   BANK1
   853 ;;      Params:         0       0       0
   854 ;;      Locals:         2       0       0
   855 ;;      Temps:          1       0       0
   856 ;;      Totals:         3       0       0
   857 ;;Total ram usage:        3 bytes
   858 ;; Hardware stack levels used:    1
   859 ;; Hardware stack levels required when called:    1
   860 ;; This function calls:
   861 ;;		_I2C_Delay
   862 ;; This function is called by:
   863 ;;		_I2C_Simple_Read_From_Device
   864 ;; This function uses a non-reentrant model
   865 ;;
   866  066C                     _I2C_Receive8Bit:	
   867                           
   868                           ;key.c: 129: unsigned char i,buffer = 0;
   869                           
   870                           ; Regs used in _I2C_Receive8Bit: [wreg+status,2+status,0+pclath+cstack]
   871  066C  01F3               	clrf	I2C_Receive8Bit@buffer
   872                           
   873                           ;key.c: 130: TRISCbits.TRISC1 = 1;
   874  066D  1683               	bsf	3,5	;RP0=1, select bank1
   875  066E  1487               	bsf	7,1	;volatile
   876                           
   877                           ;key.c: 131: PORTCbits.RC2 = 0;
   878  066F  1283               	bcf	3,5	;RP0=0, select bank0
   879  0670  1107               	bcf	7,2	;volatile
   880                           
   881                           ;key.c: 132: for (i = 0; i < 8; i++)
   882  0671  01F2               	clrf	I2C_Receive8Bit@i
   883  0672                     l6484:	
   884                           
   885                           ;key.c: 133: {
   886                           ;key.c: 134: I2C_Delay();
   887  0672  25EE               	fcall	_I2C_Delay
   888                           
   889                           ;key.c: 135: PORTCbits.RC2 = 1;
   890  0673  1283               	bcf	3,5	;RP0=0, select bank0
   891  0674  1507               	bsf	7,2	;volatile
   892                           
   893                           ;key.c: 136: buffer = (buffer<<1)|PORTCbits.RC1;
   894  0675  0C07               	rrf	7,w	;volatile
   895  0676  3901               	andlw	1
   896  0677  00F1               	movwf	??_I2C_Receive8Bit
   897  0678  1003               	clrc
   898  0679  0D73               	rlf	I2C_Receive8Bit@buffer,w
   899  067A  0471               	iorwf	??_I2C_Receive8Bit,w
   900  067B  00F3               	movwf	I2C_Receive8Bit@buffer
   901                           
   902                           ;key.c: 137: I2C_Delay();
   903  067C  25EE               	fcall	_I2C_Delay
   904                           
   905                           ;key.c: 138: PORTCbits.RC2 = 0;
   906  067D  1283               	bcf	3,5	;RP0=0, select bank0
   907  067E  1107               	bcf	7,2	;volatile
   908  067F  3008               	movlw	8
   909  0680  0AF2               	incf	I2C_Receive8Bit@i,f
   910  0681  0272               	subwf	I2C_Receive8Bit@i,w
   911  0682  1C03               	skipc
   912  0683  2E72               	goto	l6484
   913                           
   914                           ;key.c: 139: }
   915                           ;key.c: 140: return (buffer);
   916  0684  0873               	movf	I2C_Receive8Bit@buffer,w
   917  0685  0008               	return
   918  0686                     __end_of_I2C_Receive8Bit:	
   919                           
   920                           	psect	text404
   921  0646                     __ptext404:	
   922 ;; =============== function _I2C_Receive8Bit ends ============
   923                           
   924                           
   925 ;; *************** function _I2C_Respond *****************
   926 ;; Defined at:
   927 ;;		line 113 in file "hardware/src/key.c"
   928 ;; Parameters:    Size  Location     Type
   929 ;;  ACKSignal       1    wreg     unsigned char 
   930 ;; Auto vars:     Size  Location     Type
   931 ;;  ACKSignal       1    1[COMMON] unsigned char 
   932 ;; Return value:  Size  Location     Type
   933 ;;		None               void
   934 ;; Registers used:
   935 ;;		wreg, status,2, status,0, pclath, cstack
   936 ;; Tracked objects:
   937 ;;		On entry : 0/0
   938 ;;		On exit  : 20/0
   939 ;;		Unchanged: FFE00/0
   940 ;; Data sizes:     COMMON   BANK0   BANK1
   941 ;;      Params:         0       0       0
   942 ;;      Locals:         1       0       0
   943 ;;      Temps:          0       0       0
   944 ;;      Totals:         1       0       0
   945 ;;Total ram usage:        1 bytes
   946 ;; Hardware stack levels used:    1
   947 ;; Hardware stack levels required when called:    1
   948 ;; This function calls:
   949 ;;		_I2C_Delay
   950 ;; This function is called by:
   951 ;;		_I2C_Simple_Read_From_Device
   952 ;; This function uses a non-reentrant model
   953 ;;
   954  0646                     _I2C_Respond:	
   955                           
   956                           ; Regs used in _I2C_Respond: [wreg+status,2+status,0+pclath+cstack]
   957                           ;I2C_Respond@ACKSignal stored from wreg
   958  0646  00F1               	movwf	I2C_Respond@ACKSignal
   959                           
   960                           ;key.c: 114: TRISCbits.TRISC1 = 0;
   961  0647  1683               	bsf	3,5	;RP0=1, select bank1
   962  0648  1087               	bcf	7,1	;volatile
   963                           
   964                           ;key.c: 115: PORTCbits.RC1 = 0;
   965  0649  1283               	bcf	3,5	;RP0=0, select bank0
   966  064A  1087               	bcf	7,1	;volatile
   967                           
   968                           ;key.c: 116: PORTCbits.RC2 = 0;
   969  064B  1107               	bcf	7,2	;volatile
   970                           
   971                           ;key.c: 117: PORTCbits.RC1 = ACKSignal;
   972  064C  0871               	movf	I2C_Respond@ACKSignal,w
   973  064D  1D03               	skipz
   974  064E  1487               	bsf	7,1	;volatile
   975  064F  1903               	skipnz
   976  0650  1087               	bcf	7,1	;volatile
   977                           
   978                           ;key.c: 118: I2C_Delay();
   979  0651  25EE               	fcall	_I2C_Delay
   980                           
   981                           ;key.c: 119: PORTCbits.RC2 = 1;
   982  0652  1283               	bcf	3,5	;RP0=0, select bank0
   983  0653  1507               	bsf	7,2	;volatile
   984                           
   985                           ;key.c: 120: I2C_Delay();
   986  0654  25EE               	fcall	_I2C_Delay
   987                           
   988                           ;key.c: 121: PORTCbits.RC2 = 0;
   989  0655  1283               	bcf	3,5	;RP0=0, select bank0
   990  0656  1107               	bcf	7,2	;volatile
   991  0657  0008               	return
   992  0658                     __end_of_I2C_Respond:	
   993                           
   994                           	psect	text405
   995  0711                     __ptext405:	
   996 ;; =============== function _I2C_Respond ends ============
   997                           
   998                           
   999 ;; *************** function _SendByteAndGetNACK *****************
  1000 ;; Defined at:
  1001 ;;		line 82 in file "hardware/src/key.c"
  1002 ;; Parameters:    Size  Location     Type
  1003 ;;  dataToSend      1    wreg     unsigned char 
  1004 ;; Auto vars:     Size  Location     Type
  1005 ;;  dataToSend      1    3[COMMON] unsigned char 
  1006 ;;  i               1    4[COMMON] unsigned char 
  1007 ;; Return value:  Size  Location     Type
  1008 ;;                  1    wreg      unsigned char 
  1009 ;; Registers used:
  1010 ;;		wreg, status,2, status,0, pclath, cstack
  1011 ;; Tracked objects:
  1012 ;;		On entry : 0/0
  1013 ;;		On exit  : 20/0
  1014 ;;		Unchanged: FFE00/0
  1015 ;; Data sizes:     COMMON   BANK0   BANK1
  1016 ;;      Params:         0       0       0
  1017 ;;      Locals:         2       0       0
  1018 ;;      Temps:          2       0       0
  1019 ;;      Totals:         4       0       0
  1020 ;;Total ram usage:        4 bytes
  1021 ;; Hardware stack levels used:    1
  1022 ;; Hardware stack levels required when called:    1
  1023 ;; This function calls:
  1024 ;;		_I2C_Delay
  1025 ;; This function is called by:
  1026 ;;		_I2C_Simple_Read_From_Device
  1027 ;; This function uses a non-reentrant model
  1028 ;;
  1029  0711                     _SendByteAndGetNACK:	
  1030                           
  1031                           ; Regs used in _SendByteAndGetNACK: [wreg+status,2+status,0+pclath+cstack]
  1032                           ;SendByteAndGetNACK@dataToSend stored from wreg
  1033  0711  00F3               	movwf	SendByteAndGetNACK@dataToSend
  1034                           
  1035                           ;key.c: 83: unsigned char i;
  1036                           ;key.c: 84: TRISCbits.TRISC1 = 0;
  1037  0712  1683               	bsf	3,5	;RP0=1, select bank1
  1038  0713  1087               	bcf	7,1	;volatile
  1039                           
  1040                           ;key.c: 85: for (i = 0; i < 8; i++) {
  1041  0714  01F4               	clrf	SendByteAndGetNACK@i
  1042                           
  1043                           ;key.c: 86: PORTCbits.RC2 = 0;
  1044  0715  1283               	bcf	3,5	;RP0=0, select bank0
  1045  0716                     L2:	
  1046  0716  1107               	bcf	7,2	;volatile
  1047                           
  1048                           ;key.c: 87: I2C_Delay();
  1049  0717  25EE               	fcall	_I2C_Delay
  1050                           
  1051                           ;key.c: 88: PORTCbits.RC1 = (dataToSend>>7) &0x01;
  1052  0718  0873               	movf	SendByteAndGetNACK@dataToSend,w
  1053  0719  00F1               	movwf	??_SendByteAndGetNACK
  1054  071A  3007               	movlw	7
  1055  071B                     u625:	
  1056  071B  1003               	clrc
  1057  071C  0CF1               	rrf	??_SendByteAndGetNACK,f
  1058  071D  3EFF               	addlw	-1
  1059  071E  1D03               	skipz
  1060  071F  2F1B               	goto	u625
  1061  0720  0871               	movf	??_SendByteAndGetNACK,w
  1062  0721  3901               	andlw	1
  1063  0722  00F2               	movwf	??_SendByteAndGetNACK+1
  1064  0723  0DF2               	rlf	??_SendByteAndGetNACK+1,f
  1065  0724  1283               	bcf	3,5	;RP0=0, select bank0
  1066  0725  0807               	movf	7,w	;volatile
  1067  0726  0672               	xorwf	??_SendByteAndGetNACK+1,w
  1068  0727  39FD               	andlw	-3
  1069  0728  0672               	xorwf	??_SendByteAndGetNACK+1,w
  1070  0729  0087               	movwf	7	;volatile
  1071                           
  1072                           ;key.c: 89: I2C_Delay();
  1073  072A  25EE               	fcall	_I2C_Delay
  1074                           
  1075                           ;key.c: 90: PORTCbits.RC2 = 1;
  1076  072B  1283               	bcf	3,5	;RP0=0, select bank0
  1077  072C  1507               	bsf	7,2	;volatile
  1078                           
  1079                           ;key.c: 91: I2C_Delay();
  1080  072D  25EE               	fcall	_I2C_Delay
  1081  072E  3008               	movlw	8
  1082                           
  1083                           ;key.c: 92: dataToSend <<= 1;
  1084  072F  1003               	clrc
  1085  0730  0DF3               	rlf	SendByteAndGetNACK@dataToSend,f
  1086  0731  0AF4               	incf	SendByteAndGetNACK@i,f
  1087  0732  0274               	subwf	SendByteAndGetNACK@i,w
  1088                           
  1089                           ;key.c: 93: }
  1090                           ;key.c: 94: PORTCbits.RC2 = 0;
  1091  0733  1283               	bcf	3,5	;RP0=0, select bank0
  1092  0734  1C03               	skipc
  1093  0735  2F16               	goto	L2
  1094  0736  1107               	bcf	7,2	;volatile
  1095                           
  1096                           ;key.c: 95: TRISCbits.TRISC1 = 1;
  1097  0737  1683               	bsf	3,5	;RP0=1, select bank1
  1098  0738  1487               	bsf	7,1	;volatile
  1099                           
  1100                           ;key.c: 96: I2C_Delay();
  1101  0739  25EE               	fcall	_I2C_Delay
  1102                           
  1103                           ;key.c: 97: PORTCbits.RC2 = 1;
  1104  073A  1283               	bcf	3,5	;RP0=0, select bank0
  1105  073B  1507               	bsf	7,2	;volatile
  1106                           
  1107                           ;key.c: 98: I2C_Delay();
  1108  073C  25EE               	fcall	_I2C_Delay
  1109                           
  1110                           ;key.c: 99: i= 250;
  1111  073D  30FA               	movlw	250
  1112  073E  00F4               	movwf	SendByteAndGetNACK@i
  1113  073F                     l6456:	
  1114                           ;key.c: 100: while(i--)
  1115                           
  1116  073F  03F4               	decf	SendByteAndGetNACK@i,f
  1117  0740  0874               	movf	SendByteAndGetNACK@i,w
  1118  0741  3AFF               	xorlw	255
  1119                           
  1120                           ;key.c: 101: {
  1121                           ;key.c: 102: if(!PORTCbits.RC1){ PORTCbits.RC2 = 0; return 0;}
  1122  0742  1283               	bcf	3,5	;RP0=0, select bank0
  1123  0743  1903               	btfsc	3,2
  1124  0744  2F49               	goto	L3
  1125  0745  1887               	btfsc	7,1	;volatile
  1126  0746  2F3F               	goto	l6456
  1127  0747  1107               	bcf	7,2	;volatile
  1128  0748  3400               	retlw	0
  1129  0749                     L3:	
  1130                           ;key.c: 103: }
  1131                           ;key.c: 104: PORTCbits.RC2 = 0;
  1132                           
  1133  0749  1107               	bcf	7,2	;volatile
  1134                           
  1135                           ;key.c: 105: return (1);
  1136  074A  3401               	retlw	1
  1137  074B                     __end_of_SendByteAndGetNACK:	
  1138                           
  1139                           	psect	text406
  1140  061C                     __ptext406:	
  1141 ;; =============== function _SendByteAndGetNACK ends ============
  1142                           
  1143                           
  1144 ;; *************** function _I2C_Stop *****************
  1145 ;; Defined at:
  1146 ;;		line 68 in file "hardware/src/key.c"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;		None
  1149 ;; Auto vars:     Size  Location     Type
  1150 ;;		None
  1151 ;; Return value:  Size  Location     Type
  1152 ;;		None               void
  1153 ;; Registers used:
  1154 ;;		wreg, status,2, status,0, pclath, cstack
  1155 ;; Tracked objects:
  1156 ;;		On entry : 20/0
  1157 ;;		On exit  : 20/0
  1158 ;;		Unchanged: FFE00/0
  1159 ;; Data sizes:     COMMON   BANK0   BANK1
  1160 ;;      Params:         0       0       0
  1161 ;;      Locals:         0       0       0
  1162 ;;      Temps:          0       0       0
  1163 ;;      Totals:         0       0       0
  1164 ;;Total ram usage:        0 bytes
  1165 ;; Hardware stack levels used:    1
  1166 ;; Hardware stack levels required when called:    1
  1167 ;; This function calls:
  1168 ;;		_I2C_Delay
  1169 ;; This function is called by:
  1170 ;;		_I2C_Simple_Read_From_Device
  1171 ;; This function uses a non-reentrant model
  1172 ;;
  1173  061C                     _I2C_Stop:	
  1174                           
  1175                           ;key.c: 69: PORTCbits.RC2 = 0;
  1176                           
  1177                           ; Regs used in _I2C_Stop: [wreg+status,2+status,0+pclath+cstack]
  1178  061C  1107               	bcf	7,2	;volatile
  1179                           
  1180                           ;key.c: 70: TRISCbits.TRISC1 = 0;
  1181  061D  1683               	bsf	3,5	;RP0=1, select bank1
  1182  061E  1087               	bcf	7,1	;volatile
  1183                           
  1184                           ;key.c: 71: PORTCbits.RC1 = 0;
  1185  061F  1283               	bcf	3,5	;RP0=0, select bank0
  1186  0620  1087               	bcf	7,1	;volatile
  1187                           
  1188                           ;key.c: 72: I2C_Delay();
  1189  0621  25EE               	fcall	_I2C_Delay
  1190                           
  1191                           ;key.c: 73: PORTCbits.RC2 = 1;
  1192  0622  1283               	bcf	3,5	;RP0=0, select bank0
  1193  0623  1507               	bsf	7,2	;volatile
  1194                           
  1195                           ;key.c: 74: I2C_Delay();
  1196  0624  25EE               	fcall	_I2C_Delay
  1197                           
  1198                           ;key.c: 75: PORTCbits.RC1 = 1;
  1199  0625  1283               	bcf	3,5	;RP0=0, select bank0
  1200  0626  1487               	bsf	7,1	;volatile
  1201  0627  0008               	return
  1202  0628                     __end_of_I2C_Stop:	
  1203                           
  1204                           	psect	text407
  1205  0628                     __ptext407:	
  1206 ;; =============== function _I2C_Stop ends ============
  1207                           
  1208                           
  1209 ;; *************** function _I2C_Start *****************
  1210 ;; Defined at:
  1211 ;;		line 54 in file "hardware/src/key.c"
  1212 ;; Parameters:    Size  Location     Type
  1213 ;;		None
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;		None
  1216 ;; Return value:  Size  Location     Type
  1217 ;;		None               void
  1218 ;; Registers used:
  1219 ;;		wreg, status,2, status,0, pclath, cstack
  1220 ;; Tracked objects:
  1221 ;;		On entry : 20/0
  1222 ;;		On exit  : 0/0
  1223 ;;		Unchanged: FFE00/0
  1224 ;; Data sizes:     COMMON   BANK0   BANK1
  1225 ;;      Params:         0       0       0
  1226 ;;      Locals:         0       0       0
  1227 ;;      Temps:          0       0       0
  1228 ;;      Totals:         0       0       0
  1229 ;;Total ram usage:        0 bytes
  1230 ;; Hardware stack levels used:    1
  1231 ;; Hardware stack levels required when called:    1
  1232 ;; This function calls:
  1233 ;;		_I2C_Delay
  1234 ;; This function is called by:
  1235 ;;		_I2C_Simple_Read_From_Device
  1236 ;; This function uses a non-reentrant model
  1237 ;;
  1238  0628                     _I2C_Start:	
  1239                           
  1240                           ;key.c: 55: TRISCbits.TRISC1 = 0;
  1241                           
  1242                           ; Regs used in _I2C_Start: [wreg+status,2+status,0+pclath+cstack]
  1243  0628  1683               	bsf	3,5	;RP0=1, select bank1
  1244  0629  1087               	bcf	7,1	;volatile
  1245                           
  1246                           ;key.c: 56: TRISCbits.TRISC2 = 0;
  1247  062A  1107               	bcf	7,2	;volatile
  1248                           
  1249                           ;key.c: 57: PORTCbits.RC1 = 1;
  1250  062B  1283               	bcf	3,5	;RP0=0, select bank0
  1251  062C  1487               	bsf	7,1	;volatile
  1252                           
  1253                           ;key.c: 58: PORTCbits.RC2 = 1;
  1254  062D  1507               	bsf	7,2	;volatile
  1255                           
  1256                           ;key.c: 59: I2C_Delay();
  1257  062E  25EE               	fcall	_I2C_Delay
  1258                           
  1259                           ;key.c: 60: PORTCbits.RC1 = 0;
  1260  062F  1283               	bcf	3,5	;RP0=0, select bank0
  1261  0630  1087               	bcf	7,1	;volatile
  1262                           
  1263                           ;key.c: 61: I2C_Delay();
  1264  0631  25EE               	fcall	_I2C_Delay
  1265                           
  1266                           ;key.c: 62: PORTCbits.RC2 = 0;
  1267  0632  1283               	bcf	3,5	;RP0=0, select bank0
  1268  0633  1107               	bcf	7,2	;volatile
  1269                           
  1270                           ;key.c: 63: I2C_Delay();
  1271  0634  2DEE               	ljmp	l6170
  1272  0635                     __end_of_I2C_Start:	
  1273                           
  1274                           	psect	text408
  1275  06A3                     __ptext408:	
  1276 ;; =============== function _I2C_Start ends ============
  1277                           
  1278                           
  1279 ;; *************** function _BUZZER_KeySound *****************
  1280 ;; Defined at:
  1281 ;;		line 23 in file "hardware/src/buzzer.c"
  1282 ;; Parameters:    Size  Location     Type
  1283 ;;		None
  1284 ;; Auto vars:     Size  Location     Type
  1285 ;;  m               2    1[COMMON] unsigned int 
  1286 ;; Return value:  Size  Location     Type
  1287 ;;		None               void
  1288 ;; Registers used:
  1289 ;;		wreg, status,2, status,0
  1290 ;; Tracked objects:
  1291 ;;		On entry : 20/0
  1292 ;;		On exit  : 0/0
  1293 ;;		Unchanged: 0/0
  1294 ;; Data sizes:     COMMON   BANK0   BANK1
  1295 ;;      Params:         0       0       0
  1296 ;;      Locals:         2       0       0
  1297 ;;      Temps:          1       0       0
  1298 ;;      Totals:         3       0       0
  1299 ;;Total ram usage:        3 bytes
  1300 ;; Hardware stack levels used:    1
  1301 ;; This function calls:
  1302 ;;		Nothing
  1303 ;; This function is called by:
  1304 ;;		_Buzzer_Sound
  1305 ;; This function uses a non-reentrant model
  1306 ;;
  1307  06A3                     _BUZZER_KeySound:	
  1308                           
  1309                           ;buzzer.c: 24: unsigned int m;
  1310                           ;buzzer.c: 26: for(m=0;m<30;m++){
  1311                           
  1312                           ; Regs used in _BUZZER_KeySound: [wreg+status,2+status,0]
  1313  06A3  01F1               	clrf	BUZZER_KeySound@m
  1314  06A4  01F2               	clrf	BUZZER_KeySound@m+1
  1315  06A5                     l6398:	
  1316                           
  1317                           ;buzzer.c: 27: PORTCbits.RC5=!PORTCbits.RC5;
  1318  06A5  3000               	movlw	0
  1319  06A6  1283               	bcf	3,5	;RP0=0, select bank0
  1320  06A7  1E87               	btfss	7,5	;volatile
  1321  06A8  3001               	movlw	1
  1322  06A9  00F0               	movwf	??_BUZZER_KeySound
  1323  06AA  0EF0               	swapf	??_BUZZER_KeySound,f
  1324  06AB  0DF0               	rlf	??_BUZZER_KeySound,f
  1325  06AC  0807               	movf	7,w	;volatile
  1326  06AD  0670               	xorwf	??_BUZZER_KeySound,w
  1327  06AE  39DF               	andlw	-33
  1328  06AF  0670               	xorwf	??_BUZZER_KeySound,w
  1329  06B0  0087               	movwf	7	;volatile
  1330                           
  1331                           ;buzzer.c: 28: _delay((unsigned long)((500)*(4000000/4000000.0)));
  1332  06B1  30A6               	movlw	166
  1333  06B2  00F0               	movwf	??_BUZZER_KeySound
  1334  06B3                     u767:	
  1335  06B3  0BF0               	decfsz	??_BUZZER_KeySound,f
  1336  06B4  2EB3               	goto	u767
  1337  06B5  0064               	clrwdt
  1338  06B6  0AF1               	incf	BUZZER_KeySound@m,f
  1339  06B7  1903               	skipnz
  1340  06B8  0AF2               	incf	BUZZER_KeySound@m+1,f
  1341  06B9  3000               	movlw	0
  1342  06BA  0272               	subwf	BUZZER_KeySound@m+1,w
  1343  06BB  301E               	movlw	30
  1344  06BC  1903               	skipnz
  1345  06BD  0271               	subwf	BUZZER_KeySound@m,w
  1346  06BE  1803               	btfsc	3,0
  1347  06BF  0008               	return
  1348  06C0  2EA5               	goto	l6398
  1349  06C1                     __end_of_BUZZER_KeySound:	
  1350                           
  1351                           	psect	text409
  1352  0606                     __ptext409:	
  1353 ;; =============== function _BUZZER_KeySound ends ============
  1354                           
  1355                           
  1356 ;; *************** function _Motor_Init *****************
  1357 ;; Defined at:
  1358 ;;		line 13 in file "hardware/src/motor.c"
  1359 ;; Parameters:    Size  Location     Type
  1360 ;;		None
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;		None
  1363 ;; Return value:  Size  Location     Type
  1364 ;;		None               void
  1365 ;; Registers used:
  1366 ;;		wreg
  1367 ;; Tracked objects:
  1368 ;;		On entry : 17F/20
  1369 ;;		On exit  : 17F/0
  1370 ;;		Unchanged: FFE80/0
  1371 ;; Data sizes:     COMMON   BANK0   BANK1
  1372 ;;      Params:         0       0       0
  1373 ;;      Locals:         0       0       0
  1374 ;;      Temps:          0       0       0
  1375 ;;      Totals:         0       0       0
  1376 ;;Total ram usage:        0 bytes
  1377 ;; Hardware stack levels used:    1
  1378 ;; This function calls:
  1379 ;;		Nothing
  1380 ;; This function is called by:
  1381 ;;		_main
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384  0606                     _Motor_Init:	
  1385                           
  1386                           ;motor.c: 15: CMCON0 = 0x07;
  1387                           
  1388                           ; Regs used in _Motor_Init: [wreg]
  1389  0606  3007               	movlw	7
  1390  0607  1283               	bcf	3,5	;RP0=0, select bank0
  1391  0608  0099               	movwf	25	;volatile
  1392                           
  1393                           ;motor.c: 16: ANSELbits.ANS3 = 0;
  1394  0609  1683               	bsf	3,5	;RP0=1, select bank1
  1395  060A  1191               	bcf	17,3	;volatile
  1396                           
  1397                           ;motor.c: 18: TRISAbits.TRISA5 = 0;
  1398  060B  1285               	bcf	5,5	;volatile
  1399                           
  1400                           ;motor.c: 19: TRISAbits.TRISA4 =0;
  1401  060C  1205               	bcf	5,4	;volatile
  1402                           
  1403                           ;motor.c: 24: (PORTAbits.RA4 = 0) ;
  1404  060D  1283               	bcf	3,5	;RP0=0, select bank0
  1405  060E  1205               	bcf	5,4	;volatile
  1406                           
  1407                           ;motor.c: 25: (PORTAbits.RA5 = 0);
  1408  060F  1285               	bcf	5,5	;volatile
  1409  0610  0008               	return
  1410  0611                     __end_of_Motor_Init:	
  1411                           
  1412                           	psect	text410
  1413  0658                     __ptext410:	
  1414 ;; =============== function _Motor_Init ends ============
  1415                           
  1416                           
  1417 ;; *************** function _LED_Init *****************
  1418 ;; Defined at:
  1419 ;;		line 13 in file "hardware/src/led.c"
  1420 ;; Parameters:    Size  Location     Type
  1421 ;;		None
  1422 ;; Auto vars:     Size  Location     Type
  1423 ;;		None
  1424 ;; Return value:  Size  Location     Type
  1425 ;;		None               void
  1426 ;; Registers used:
  1427 ;;		wreg
  1428 ;; Tracked objects:
  1429 ;;		On entry : 17F/0
  1430 ;;		On exit  : 17F/0
  1431 ;;		Unchanged: FFE80/0
  1432 ;; Data sizes:     COMMON   BANK0   BANK1
  1433 ;;      Params:         0       0       0
  1434 ;;      Locals:         0       0       0
  1435 ;;      Temps:          0       0       0
  1436 ;;      Totals:         0       0       0
  1437 ;;Total ram usage:        0 bytes
  1438 ;; Hardware stack levels used:    1
  1439 ;; This function calls:
  1440 ;;		Nothing
  1441 ;; This function is called by:
  1442 ;;		_System_Init
  1443 ;; This function uses a non-reentrant model
  1444 ;;
  1445  0658                     _LED_Init:	
  1446                           
  1447                           ;led.c: 15: CMCON0 = 0x07;
  1448                           
  1449                           ; Regs used in _LED_Init: [wreg]
  1450  0658  3007               	movlw	7
  1451  0659  0099               	movwf	25	;volatile
  1452                           
  1453                           ;led.c: 16: ANSELbits.ANS0 = 0;
  1454  065A  1683               	bsf	3,5	;RP0=1, select bank1
  1455  065B  1011               	bcf	17,0	;volatile
  1456                           
  1457                           ;led.c: 17: ANSELbits.ANS1 = 0;
  1458  065C  1091               	bcf	17,1	;volatile
  1459                           
  1460                           ;led.c: 18: ANSELbits.ANS2 =0 ;
  1461  065D  1111               	bcf	17,2	;volatile
  1462                           
  1463                           ;led.c: 19: ANSELbits.ANS7 =0 ;
  1464  065E  1391               	bcf	17,7	;volatile
  1465                           
  1466                           ;led.c: 21: TRISAbits.TRISA0 =0;
  1467  065F  1005               	bcf	5,0	;volatile
  1468                           
  1469                           ;led.c: 22: TRISAbits.TRISA1 =0 ;
  1470  0660  1085               	bcf	5,1	;volatile
  1471                           
  1472                           ;led.c: 23: TRISAbits.TRISA2 = 0;
  1473  0661  1105               	bcf	5,2	;volatile
  1474                           
  1475                           ;led.c: 24: TRISCbits.TRISC4 = 0;
  1476  0662  1207               	bcf	7,4	;volatile
  1477                           
  1478                           ;led.c: 25: TRISCbits.TRISC3 = 0;
  1479  0663  1187               	bcf	7,3	;volatile
  1480                           
  1481                           ;led.c: 27: TRISAbits.TRISA3 = 1;
  1482  0664  1585               	bsf	5,3	;volatile
  1483                           
  1484                           ;led.c: 30: PORTAbits.RA0=1;
  1485  0665  1283               	bcf	3,5	;RP0=0, select bank0
  1486  0666  1405               	bsf	5,0	;volatile
  1487                           
  1488                           ;led.c: 31: PORTAbits.RA1=1;
  1489  0667  1485               	bsf	5,1	;volatile
  1490                           
  1491                           ;led.c: 32: PORTAbits.RA2=0;
  1492  0668  1105               	bcf	5,2	;volatile
  1493                           
  1494                           ;led.c: 33: PORTCbits.RC4=1;
  1495  0669  1607               	bsf	7,4	;volatile
  1496                           
  1497                           ;led.c: 34: PORTCbits.RC3= 0;
  1498  066A  1187               	bcf	7,3	;volatile
  1499  066B  0008               	return
  1500  066C                     __end_of_LED_Init:	
  1501                           
  1502                           	psect	text411
  1503  05FC                     __ptext411:	
  1504 ;; =============== function _LED_Init ends ============
  1505                           
  1506                           
  1507 ;; *************** function _ADC_Init *****************
  1508 ;; Defined at:
  1509 ;;		line 5 in file "hardware/src/ADC.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;		None
  1512 ;; Auto vars:     Size  Location     Type
  1513 ;;		None
  1514 ;; Return value:  Size  Location     Type
  1515 ;;		None               void
  1516 ;; Registers used:
  1517 ;;		wreg, status,2
  1518 ;; Tracked objects:
  1519 ;;		On entry : 17F/0
  1520 ;;		On exit  : 17F/0
  1521 ;;		Unchanged: FFE80/0
  1522 ;; Data sizes:     COMMON   BANK0   BANK1
  1523 ;;      Params:         0       0       0
  1524 ;;      Locals:         0       0       0
  1525 ;;      Temps:          0       0       0
  1526 ;;      Totals:         0       0       0
  1527 ;;Total ram usage:        0 bytes
  1528 ;; Hardware stack levels used:    1
  1529 ;; This function calls:
  1530 ;;		Nothing
  1531 ;; This function is called by:
  1532 ;;		_main
  1533 ;; This function uses a non-reentrant model
  1534 ;;
  1535  05FC                     _ADC_Init:	
  1536                           
  1537                           ;ADC.c: 7: CMCON0 = 0x07;
  1538                           
  1539                           ; Regs used in _ADC_Init: [wreg+status,2]
  1540  05FC  3007               	movlw	7
  1541  05FD  0099               	movwf	25	;volatile
  1542                           
  1543                           ;ADC.c: 8: ANSELbits.ANS4 = 1 ;
  1544  05FE  1683               	bsf	3,5	;RP0=1, select bank1
  1545  05FF  1611               	bsf	17,4	;volatile
  1546                           
  1547                           ;ADC.c: 9: WPU = 0x00;
  1548  0600  0195               	clrf	21	;volatile
  1549                           
  1550                           ;ADC.c: 10: TRISCbits.TRISC0 = 1 ;
  1551  0601  1407               	bsf	7,0	;volatile
  1552                           
  1553                           ;ADC.c: 12: ADCON0 = 0x90;
  1554  0602  3090               	movlw	144
  1555  0603  1283               	bcf	3,5	;RP0=0, select bank0
  1556  0604  009F               	movwf	31	;volatile
  1557  0605  0008               	return
  1558  0606                     __end_of_ADC_Init:	
  1559                           
  1560                           	psect	text412
  1561  0635                     __ptext412:	
  1562 ;; =============== function _ADC_Init ends ============
  1563                           
  1564                           
  1565 ;; *************** function _BackLight_Fun *****************
  1566 ;; Defined at:
  1567 ;;		line 942 in file "hardware/src/run.c"
  1568 ;; Parameters:    Size  Location     Type
  1569 ;;		None
  1570 ;; Auto vars:     Size  Location     Type
  1571 ;;		None
  1572 ;; Return value:  Size  Location     Type
  1573 ;;		None               void
  1574 ;; Registers used:
  1575 ;;		wreg, status,2
  1576 ;; Tracked objects:
  1577 ;;		On entry : 20/0
  1578 ;;		On exit  : 20/0
  1579 ;;		Unchanged: FFFDF/0
  1580 ;; Data sizes:     COMMON   BANK0   BANK1
  1581 ;;      Params:         0       0       0
  1582 ;;      Locals:         0       0       0
  1583 ;;      Temps:          0       0       0
  1584 ;;      Totals:         0       0       0
  1585 ;;Total ram usage:        0 bytes
  1586 ;; Hardware stack levels used:    1
  1587 ;; This function calls:
  1588 ;;		Nothing
  1589 ;; This function is called by:
  1590 ;;		_main
  1591 ;; This function uses a non-reentrant model
  1592 ;;
  1593  0635                     _BackLight_Fun:	
  1594                           
  1595                           ;run.c: 943: if(run_t.BackLight ==1 ){
  1596                           
  1597                           ; Regs used in _BackLight_Fun: [wreg+status,2]
  1598  0635  0B24               	decfsz	_run_t+4,w
  1599  0636  2E3A               	goto	l1874
  1600                           
  1601                           ;run.c: 945: run_t.BackLight =0;
  1602  0637  01A4               	clrf	_run_t+4
  1603                           
  1604                           ;run.c: 946: (PORTAbits.RA2 =1) ;
  1605  0638  1505               	bsf	5,2	;volatile
  1606                           
  1607                           ;run.c: 948: }
  1608  0639  2E3B               	goto	l6330
  1609  063A                     l1874:	
  1610                           
  1611                           ;run.c: 949: else{
  1612                           ;run.c: 951: (PORTAbits.RA2 =0) ;
  1613  063A  1105               	bcf	5,2	;volatile
  1614  063B                     l6330:	
  1615                           
  1616                           ;run.c: 954: }
  1617                           ;run.c: 956: if(run_t.BackLight==2){
  1618  063B  0824               	movf	_run_t+4,w
  1619  063C  3A02               	xorlw	2
  1620  063D  1D03               	skipz
  1621  063E  2E43               	goto	l1876
  1622                           
  1623                           ;run.c: 957: run_t.BackLight =0;
  1624  063F  01A4               	clrf	_run_t+4
  1625                           
  1626                           ;run.c: 959: (PORTCbits.RC3 = 1);
  1627  0640  1587               	bsf	7,3	;volatile
  1628                           
  1629                           ;run.c: 960: (PORTAbits.RA2 =1) ;
  1630  0641  1505               	bsf	5,2	;volatile
  1631                           
  1632                           ;run.c: 962: }
  1633  0642  0008               	return
  1634  0643                     l1876:	
  1635                           
  1636                           ;run.c: 963: else{
  1637                           ;run.c: 965: (PORTAbits.RA2 =0) ;
  1638  0643  1105               	bcf	5,2	;volatile
  1639                           
  1640                           ;run.c: 966: (PORTCbits.RC3 = 0);
  1641  0644  1187               	bcf	7,3	;volatile
  1642  0645  0008               	return
  1643  0646                     __end_of_BackLight_Fun:	
  1644                           
  1645                           	psect	text413
  1646  074B                     __ptext413:	
  1647 ;; =============== function _BackLight_Fun ends ============
  1648                           
  1649                           
  1650 ;; *************** function _RunCheck_Mode *****************
  1651 ;; Defined at:
  1652 ;;		line 333 in file "hardware/src/run.c"
  1653 ;; Parameters:    Size  Location     Type
  1654 ;;  dat             2    0[COMMON] unsigned int 
  1655 ;; Auto vars:     Size  Location     Type
  1656 ;;  temp            1    0        unsigned char 
  1657 ;; Return value:  Size  Location     Type
  1658 ;;		None               void
  1659 ;; Registers used:
  1660 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1661 ;; Tracked objects:
  1662 ;;		On entry : 20/0
  1663 ;;		On exit  : 20/0
  1664 ;;		Unchanged: FFFDF/0
  1665 ;; Data sizes:     COMMON   BANK0   BANK1
  1666 ;;      Params:         2       0       0
  1667 ;;      Locals:         0       0       0
  1668 ;;      Temps:          0       0       0
  1669 ;;      Totals:         2       0       0
  1670 ;;Total ram usage:        2 bytes
  1671 ;; Hardware stack levels used:    1
  1672 ;; This function calls:
  1673 ;;		Nothing
  1674 ;; This function is called by:
  1675 ;;		_main
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678  074B                     _RunCheck_Mode:	
  1679                           
  1680                           ;run.c: 334: unsigned char temp;
  1681                           ;run.c: 335: static unsigned char temp_1,temp_2,number;
  1682                           ;run.c: 337: static unsigned int temp_3,temp_4;
  1683                           ;run.c: 338: static unsigned long int temp_5,temp_6;
  1684                           ;run.c: 339: static unsigned char k0=0xff,k1=0xff,k2=0xff,key,spec;
  1685                           ;run.c: 343: switch(dat){
  1686                           
  1687                           ; Regs used in _RunCheck_Mode: [wreg-fsr0h+status,2+status,0]
  1688  074B  2F84               	goto	l6270
  1689  074C                     l6180:	
  1690                           
  1691                           ;run.c: 349: if(k0 != n0){
  1692  074C  0831               	movf	RunCheck_Mode@k0,w
  1693  074D  062C               	xorwf	_n0,w
  1694  074E  1903               	skipnz
  1695  074F  2FD7               	goto	l6272
  1696                           
  1697                           ;run.c: 351: k0 = n0;
  1698  0750  082C               	movf	_n0,w
  1699  0751  00B1               	movwf	RunCheck_Mode@k0
  1700                           
  1701                           ;run.c: 360: temp_6=0;
  1702  0752  01A4               	clrf	_run_t+4
  1703  0753  0AA4               	incf	_run_t+4,f
  1704                           
  1705                           ;run.c: 361: run_t.buzzer_flag =1;
  1706  0754  01A5               	clrf	_run_t+5
  1707  0755  0AA5               	incf	_run_t+5,f
  1708                           
  1709                           ;run.c: 363: number =0;
  1710  0756  01AA               	clrf	RunCheck_Mode@number
  1711                           
  1712                           ;run.c: 364: spec=1;
  1713  0757  01AB               	clrf	RunCheck_Mode@spec
  1714  0758  0AAB               	incf	RunCheck_Mode@spec,f
  1715                           
  1716                           ;run.c: 365: run_t.Numbers_counter =0 ;
  1717  0759  01A6               	clrf	_run_t+6
  1718                           
  1719                           ;run.c: 366: run_t.passswordsMatch = 0;
  1720  075A  01A7               	clrf	_run_t+7
  1721                           
  1722                           ;run.c: 368: run_t.changePassword=0;
  1723  075B  01A1               	clrf	_run_t+1
  1724  075C  2FD7               	goto	l6272
  1725  075D                     l6198:	
  1726                           
  1727                           ;run.c: 376: if(k1 != n1){
  1728  075D  0832               	movf	RunCheck_Mode@k1,w
  1729  075E  062D               	xorwf	_n1,w
  1730  075F  1903               	skipnz
  1731  0760  2FD7               	goto	l6272
  1732                           
  1733                           ;run.c: 377: k1 = n1;
  1734  0761  082D               	movf	_n1,w
  1735  0762  00B2               	movwf	RunCheck_Mode@k1
  1736                           
  1737                           ;run.c: 378: spec=1;
  1738  0763  01AB               	clrf	RunCheck_Mode@spec
  1739  0764  0AAB               	incf	RunCheck_Mode@spec,f
  1740                           
  1741                           ;run.c: 379: run_t.buzzer_flag =1;
  1742  0765  01A5               	clrf	_run_t+5
  1743  0766  0AA5               	incf	_run_t+5,f
  1744                           
  1745                           ;run.c: 380: run_t.passswordsMatch = 1;
  1746  0767  01A7               	clrf	_run_t+7
  1747  0768  0AA7               	incf	_run_t+7,f
  1748  0769  2FD7               	goto	l6272
  1749  076A                     l6208:	
  1750                           
  1751                           ;run.c: 484: temp = 0;
  1752  076A  08A9               	movf	RunCheck_Mode@key,f
  1753  076B  1D03               	skipz
  1754  076C  2FD7               	goto	l6272
  1755                           
  1756                           ;run.c: 485: key=1;
  1757  076D  01A9               	clrf	RunCheck_Mode@key
  1758  076E  0AA9               	incf	RunCheck_Mode@key,f
  1759                           
  1760                           ;run.c: 486: spec=0;
  1761  076F  01AB               	clrf	RunCheck_Mode@spec
  1762  0770  2FD7               	goto	l6272
  1763  0771                     l6214:	
  1764                           
  1765                           ;run.c: 496: temp = 1;
  1766  0771  08A9               	movf	RunCheck_Mode@key,f
  1767  0772  1D03               	skipz
  1768  0773  2F77               	goto	l6220
  1769                           
  1770                           ;run.c: 497: key=1;
  1771  0774  01A9               	clrf	RunCheck_Mode@key
  1772  0775  0AA9               	incf	RunCheck_Mode@key,f
  1773                           
  1774                           ;run.c: 498: spec=0;
  1775  0776  01AB               	clrf	RunCheck_Mode@spec
  1776  0777                     l6220:	
  1777                           
  1778                           ;run.c: 506: temp = 2 ;
  1779  0777  08A9               	movf	RunCheck_Mode@key,f
  1780  0778  1D03               	skipz
  1781  0779  2F7D               	goto	l6226
  1782                           
  1783                           ;run.c: 507: key=1;
  1784  077A  01A9               	clrf	RunCheck_Mode@key
  1785  077B  0AA9               	incf	RunCheck_Mode@key,f
  1786                           
  1787                           ;run.c: 508: spec=0;
  1788  077C  01AB               	clrf	RunCheck_Mode@spec
  1789  077D                     l6226:	
  1790                           
  1791                           ;run.c: 514: temp = 3;
  1792  077D  08A9               	movf	RunCheck_Mode@key,f
  1793  077E  1D03               	skipz
  1794  077F  2F6A               	goto	l6208
  1795                           
  1796                           ;run.c: 515: key=1;
  1797  0780  01A9               	clrf	RunCheck_Mode@key
  1798  0781  0AA9               	incf	RunCheck_Mode@key,f
  1799                           
  1800                           ;run.c: 516: spec=0;
  1801  0782  01AB               	clrf	RunCheck_Mode@spec
  1802  0783                     l6232:	
  1803  0783                     l6238:	
  1804                           ;run.c: 523: temp = 4;
  1805                           
  1806  0783                     l6244:	
  1807                           ;run.c: 533: temp = 5;
  1808                           
  1809  0783                     l6250:	
  1810                           ;run.c: 543: temp = 6;
  1811                           
  1812  0783                     l6256:	
  1813                           ;run.c: 552: temp = 7;
  1814                           
  1815  0783                     l6262:	
  1816                           ;run.c: 562: temp = 8;
  1817                           
  1818  0783  2F6A               	goto	l6208
  1819  0784                     l6270:	
  1820                           ;run.c: 570: if(key==0 ){
  1821                           
  1822                           
  1823                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 9 sub-sw
      +                          itches
  1824                           ; Switch size 1, requested type "space"
  1825                           ; Number of cases is 9, Range of values is 0 to 128
  1826                           ; switch strategies available:
  1827                           ; Name         Instructions Cycles
  1828                           ; simple_byte           28    15 (average)
  1829                           ; direct_byte          135     6 (fixed)
  1830                           ; jumptable            260     6 (fixed)
  1831                           ; rangetable           133     6 (fixed)
  1832                           ; spacedrange          264     9 (fixed)
  1833                           ; locatedrange         129     3 (fixed)
  1834                           ;	Chosen strategy is simple_byte
  1835  0784  0871               	movf	RunCheck_Mode@dat+1,w
  1836  0785  3A00               	xorlw	0	; case 0
  1837  0786  1903               	skipnz
  1838  0787  2FA1               	goto	l6672
  1839  0788  3A01               	xorlw	1	; case 1
  1840  0789  1903               	skipnz
  1841  078A  2FAF               	goto	l6674
  1842  078B  3A03               	xorlw	3	; case 2
  1843  078C  1903               	skipnz
  1844  078D  2FB4               	goto	l6676
  1845  078E  3A06               	xorlw	6	; case 4
  1846  078F  1903               	skipnz
  1847  0790  2FB9               	goto	l6678
  1848  0791  3A0C               	xorlw	12	; case 8
  1849  0792  1903               	skipnz
  1850  0793  2FBE               	goto	l6680
  1851  0794  3A18               	xorlw	24	; case 16
  1852  0795  1903               	skipnz
  1853  0796  2FC3               	goto	l6682
  1854  0797  3A30               	xorlw	48	; case 32
  1855  0798  1903               	skipnz
  1856  0799  2FC8               	goto	l6684
  1857  079A  3A60               	xorlw	96	; case 64
  1858  079B  1903               	skipnz
  1859  079C  2FCD               	goto	l6686
  1860  079D  3AC0               	xorlw	192	; case 128
  1861  079E  1903               	skipnz
  1862  079F  2FD2               	goto	l6688
  1863  07A0  2FD7               	goto	l6272
  1864  07A1                     l6672:	
  1865                           
  1866                           ; Switch size 1, requested type "space"
  1867                           ; Number of cases is 4, Range of values is 16 to 128
  1868                           ; switch strategies available:
  1869                           ; Name         Instructions Cycles
  1870                           ; simple_byte           13     7 (average)
  1871                           ; direct_byte          122     9 (fixed)
  1872                           ; jumptable            263     9 (fixed)
  1873                           ;	Chosen strategy is simple_byte
  1874  07A1  0870               	movf	RunCheck_Mode@dat,w
  1875  07A2  3A10               	xorlw	16	; case 16
  1876  07A3  1903               	skipnz
  1877  07A4  2F83               	goto	l6238
  1878  07A5  3A30               	xorlw	48	; case 32
  1879  07A6  1903               	skipnz
  1880  07A7  2F5D               	goto	l6198
  1881  07A8  3A60               	xorlw	96	; case 64
  1882  07A9  1903               	skipnz
  1883  07AA  2F83               	goto	l6232
  1884  07AB  3AC0               	xorlw	192	; case 128
  1885  07AC  1903               	skipnz
  1886  07AD  2F6A               	goto	l6208
  1887  07AE  2FD7               	goto	l6272
  1888  07AF                     l6674:	
  1889                           
  1890                           ; Switch size 1, requested type "space"
  1891                           ; Number of cases is 1, Range of values is 0 to 0
  1892                           ; switch strategies available:
  1893                           ; Name         Instructions Cycles
  1894                           ; simple_byte            4     3 (average)
  1895                           ; direct_byte            7     6 (fixed)
  1896                           ; jumptable            260     6 (fixed)
  1897                           ; rangetable             5     6 (fixed)
  1898                           ; spacedrange            8     9 (fixed)
  1899                           ; locatedrange           1     3 (fixed)
  1900                           ;	Chosen strategy is simple_byte
  1901  07AF  0870               	movf	RunCheck_Mode@dat,w
  1902  07B0  3A00               	xorlw	0	; case 0
  1903  07B1  1903               	skipnz
  1904  07B2  2F7D               	goto	l6226
  1905  07B3  2FD7               	goto	l6272
  1906  07B4                     l6676:	
  1907                           
  1908                           ; Switch size 1, requested type "space"
  1909                           ; Number of cases is 1, Range of values is 0 to 0
  1910                           ; switch strategies available:
  1911                           ; Name         Instructions Cycles
  1912                           ; simple_byte            4     3 (average)
  1913                           ; direct_byte            7     6 (fixed)
  1914                           ; jumptable            260     6 (fixed)
  1915                           ; rangetable             5     6 (fixed)
  1916                           ; spacedrange            8     9 (fixed)
  1917                           ; locatedrange           1     3 (fixed)
  1918                           ;	Chosen strategy is simple_byte
  1919  07B4  0870               	movf	RunCheck_Mode@dat,w
  1920  07B5  3A00               	xorlw	0	; case 0
  1921  07B6  1903               	skipnz
  1922  07B7  2F83               	goto	l6262
  1923  07B8  2FD7               	goto	l6272
  1924  07B9                     l6678:	
  1925                           
  1926                           ; Switch size 1, requested type "space"
  1927                           ; Number of cases is 1, Range of values is 0 to 0
  1928                           ; switch strategies available:
  1929                           ; Name         Instructions Cycles
  1930                           ; simple_byte            4     3 (average)
  1931                           ; direct_byte            7     6 (fixed)
  1932                           ; jumptable            260     6 (fixed)
  1933                           ; rangetable             5     6 (fixed)
  1934                           ; spacedrange            8     9 (fixed)
  1935                           ; locatedrange           1     3 (fixed)
  1936                           ;	Chosen strategy is simple_byte
  1937  07B9  0870               	movf	RunCheck_Mode@dat,w
  1938  07BA  3A00               	xorlw	0	; case 0
  1939  07BB  1903               	skipnz
  1940  07BC  2F77               	goto	l6220
  1941  07BD  2FD7               	goto	l6272
  1942  07BE                     l6680:	
  1943                           
  1944                           ; Switch size 1, requested type "space"
  1945                           ; Number of cases is 1, Range of values is 0 to 0
  1946                           ; switch strategies available:
  1947                           ; Name         Instructions Cycles
  1948                           ; simple_byte            4     3 (average)
  1949                           ; direct_byte            7     6 (fixed)
  1950                           ; jumptable            260     6 (fixed)
  1951                           ; rangetable             5     6 (fixed)
  1952                           ; spacedrange            8     9 (fixed)
  1953                           ; locatedrange           1     3 (fixed)
  1954                           ;	Chosen strategy is simple_byte
  1955  07BE  0870               	movf	RunCheck_Mode@dat,w
  1956  07BF  3A00               	xorlw	0	; case 0
  1957  07C0  1903               	skipnz
  1958  07C1  2F83               	goto	l6256
  1959  07C2  2FD7               	goto	l6272
  1960  07C3                     l6682:	
  1961                           
  1962                           ; Switch size 1, requested type "space"
  1963                           ; Number of cases is 1, Range of values is 0 to 0
  1964                           ; switch strategies available:
  1965                           ; Name         Instructions Cycles
  1966                           ; simple_byte            4     3 (average)
  1967                           ; direct_byte            7     6 (fixed)
  1968                           ; jumptable            260     6 (fixed)
  1969                           ; rangetable             5     6 (fixed)
  1970                           ; spacedrange            8     9 (fixed)
  1971                           ; locatedrange           1     3 (fixed)
  1972                           ;	Chosen strategy is simple_byte
  1973  07C3  0870               	movf	RunCheck_Mode@dat,w
  1974  07C4  3A00               	xorlw	0	; case 0
  1975  07C5  1903               	skipnz
  1976  07C6  2F71               	goto	l6214
  1977  07C7  2FD7               	goto	l6272
  1978  07C8                     l6684:	
  1979                           
  1980                           ; Switch size 1, requested type "space"
  1981                           ; Number of cases is 1, Range of values is 0 to 0
  1982                           ; switch strategies available:
  1983                           ; Name         Instructions Cycles
  1984                           ; simple_byte            4     3 (average)
  1985                           ; direct_byte            7     6 (fixed)
  1986                           ; jumptable            260     6 (fixed)
  1987                           ; rangetable             5     6 (fixed)
  1988                           ; spacedrange            8     9 (fixed)
  1989                           ; locatedrange           1     3 (fixed)
  1990                           ;	Chosen strategy is simple_byte
  1991  07C8  0870               	movf	RunCheck_Mode@dat,w
  1992  07C9  3A00               	xorlw	0	; case 0
  1993  07CA  1903               	skipnz
  1994  07CB  2F83               	goto	l6250
  1995  07CC  2FD7               	goto	l6272
  1996  07CD                     l6686:	
  1997                           
  1998                           ; Switch size 1, requested type "space"
  1999                           ; Number of cases is 1, Range of values is 0 to 0
  2000                           ; switch strategies available:
  2001                           ; Name         Instructions Cycles
  2002                           ; simple_byte            4     3 (average)
  2003                           ; direct_byte            7     6 (fixed)
  2004                           ; jumptable            260     6 (fixed)
  2005                           ; rangetable             5     6 (fixed)
  2006                           ; spacedrange            8     9 (fixed)
  2007                           ; locatedrange           1     3 (fixed)
  2008                           ;	Chosen strategy is simple_byte
  2009  07CD  0870               	movf	RunCheck_Mode@dat,w
  2010  07CE  3A00               	xorlw	0	; case 0
  2011  07CF  1903               	skipnz
  2012  07D0  2F4C               	goto	l6180
  2013  07D1  2FD7               	goto	l6272
  2014  07D2                     l6688:	
  2015                           
  2016                           ; Switch size 1, requested type "space"
  2017                           ; Number of cases is 1, Range of values is 0 to 0
  2018                           ; switch strategies available:
  2019                           ; Name         Instructions Cycles
  2020                           ; simple_byte            4     3 (average)
  2021                           ; direct_byte            7     6 (fixed)
  2022                           ; jumptable            260     6 (fixed)
  2023                           ; rangetable             5     6 (fixed)
  2024                           ; spacedrange            8     9 (fixed)
  2025                           ; locatedrange           1     3 (fixed)
  2026                           ;	Chosen strategy is simple_byte
  2027  07D2  0870               	movf	RunCheck_Mode@dat,w
  2028  07D3  3A00               	xorlw	0	; case 0
  2029  07D4  1903               	skipnz
  2030  07D5  2F83               	goto	l6244
  2031  07D6  2FD7               	goto	l6272
  2032  07D7                     l6272:	
  2033                           
  2034                           ;run.c: 583: if(k2 != n2 && key==1 && spec ==0){
  2035  07D7  0833               	movf	RunCheck_Mode@k2,w
  2036  07D8  062E               	xorwf	_n2,w
  2037  07D9  1D03               	btfss	3,2
  2038  07DA  0B29               	decfsz	RunCheck_Mode@key,w
  2039  07DB  0008               	return
  2040  07DC  08AB               	movf	RunCheck_Mode@spec,f
  2041  07DD  1D03               	skipz
  2042  07DE  0008               	return
  2043                           
  2044                           ;run.c: 584: k2=n2;
  2045  07DF  082E               	movf	_n2,w
  2046  07E0  00B3               	movwf	RunCheck_Mode@k2
  2047                           
  2048                           ;run.c: 585: key = 0;
  2049  07E1  01A9               	clrf	RunCheck_Mode@key
  2050                           
  2051                           ;run.c: 586: spec =1;
  2052  07E2  01AB               	clrf	RunCheck_Mode@spec
  2053  07E3  0AAB               	incf	RunCheck_Mode@spec,f
  2054                           
  2055                           ;run.c: 587: number++;
  2056  07E4  0AAA               	incf	RunCheck_Mode@number,f
  2057                           
  2058                           ;run.c: 588: run_t.Numbers_counter++;
  2059  07E5  0AA6               	incf	_run_t+6,f
  2060                           
  2061                           ;run.c: 589: if(number ==1){
  2062  07E6  0B2A               	decfsz	RunCheck_Mode@number,w
  2063  07E7  2FE9               	goto	l6292
  2064                           
  2065                           ;run.c: 591: (PORTAbits.RA1 = 0);
  2066  07E8  1085               	bcf	5,1	;volatile
  2067  07E9                     l6292:	
  2068                           
  2069                           ;run.c: 592: }
  2070                           ;run.c: 593: if(number ==2)(PORTCbits.RC4 = 0);
  2071  07E9  082A               	movf	RunCheck_Mode@number,w
  2072  07EA  3A02               	xorlw	2
  2073  07EB  1903               	btfsc	3,2
  2074  07EC  1207               	bcf	7,4	;volatile
  2075                           
  2076                           ;run.c: 595: if(run_t.Numbers_counter == 3) run_t.buzzer_flag =2;
  2077  07ED  0826               	movf	_run_t+6,w
  2078  07EE  3A03               	xorlw	3
  2079  07EF  1D03               	skipz
  2080  07F0  2FF3               	goto	l1842
  2081  07F1  3002               	movlw	2
  2082  07F2  00A5               	movwf	_run_t+5
  2083  07F3                     l1842:	
  2084                           
  2085                           ;run.c: 597: if(run_t.Numbers_counter ==4)
  2086  07F3  0826               	movf	_run_t+6,w
  2087  07F4  3A04               	xorlw	4
  2088  07F5  1D03               	skipz
  2089  07F6  2FF9               	goto	l6302
  2090                           
  2091                           ;run.c: 598: {
  2092                           ;run.c: 599: (PORTAbits.RA0 =0);
  2093  07F7  1005               	bcf	5,0	;volatile
  2094                           
  2095                           ;run.c: 600: (PORTCbits.RC4 = 0);
  2096  07F8  1207               	bcf	7,4	;volatile
  2097  07F9                     l6302:	
  2098                           
  2099                           ;run.c: 601: }
  2100                           ;run.c: 603: if(run_t.Numbers_counter ==5) (PORTAbits.RA1 = 0);
  2101  07F9  0826               	movf	_run_t+6,w
  2102  07FA  3A05               	xorlw	5
  2103  07FB  1903               	btfsc	3,2
  2104  07FC  1085               	bcf	5,1	;volatile
  2105                           
  2106                           ;run.c: 604: run_t.buzzer_flag =1;
  2107  07FD  01A5               	clrf	_run_t+5
  2108  07FE  0AA5               	incf	_run_t+5,f
  2109  07FF  0008               	return
  2110  0800                     __end_of_RunCheck_Mode:	
  2111                           
  2112                           	psect	text414
  2113  05EE                     __ptext414:	
  2114 ;; =============== function _RunCheck_Mode ends ============
  2115                           
  2116                           
  2117 ;; *************** function _I2C_Delay *****************
  2118 ;; Defined at:
  2119 ;;		line 44 in file "hardware/src/key.c"
  2120 ;; Parameters:    Size  Location     Type
  2121 ;;		None
  2122 ;; Auto vars:     Size  Location     Type
  2123 ;;  a               1    0[COMMON] unsigned char 
  2124 ;; Return value:  Size  Location     Type
  2125 ;;		None               void
  2126 ;; Registers used:
  2127 ;;		wreg, status,2, status,0
  2128 ;; Tracked objects:
  2129 ;;		On entry : 0/0
  2130 ;;		On exit  : 0/0
  2131 ;;		Unchanged: FFE00/0
  2132 ;; Data sizes:     COMMON   BANK0   BANK1
  2133 ;;      Params:         0       0       0
  2134 ;;      Locals:         1       0       0
  2135 ;;      Temps:          0       0       0
  2136 ;;      Totals:         1       0       0
  2137 ;;Total ram usage:        1 bytes
  2138 ;; Hardware stack levels used:    1
  2139 ;; This function calls:
  2140 ;;		Nothing
  2141 ;; This function is called by:
  2142 ;;		_I2C_Start
  2143 ;;		_I2C_Stop
  2144 ;;		_SendByteAndGetNACK
  2145 ;;		_I2C_Respond
  2146 ;;		_I2C_Receive8Bit
  2147 ;; This function uses a non-reentrant model
  2148 ;;
  2149  05EE                     _I2C_Delay:	
  2150  05EE                     l6170:	
  2151                           ; Regs used in _I2C_Delay: [wreg+status,2+status,0]
  2152                           
  2153                           
  2154                           ;key.c: 45: unsigned char a;
  2155                           ;key.c: 46: for(a = 20; a>0; a--){
  2156  05EE  3014               	movlw	20
  2157  05EF  00F0               	movwf	I2C_Delay@a
  2158  05F0                     l1117:	
  2159  05F0  0000               	nop	;#
  2160  05F1  0BF0               	decfsz	I2C_Delay@a,f
  2161  05F2  2DF0               	goto	l1117
  2162  05F3  0008               	return
  2163  05F4                     __end_of_I2C_Delay:	
  2164                           
  2165                           	psect	text415
  2166  05E8                     __ptext415:	
  2167 ;; =============== function _I2C_Delay ends ============
  2168                           
  2169                           
  2170 ;; *************** function _SC12B_Init_Function *****************
  2171 ;; Defined at:
  2172 ;;		line 22 in file "hardware/src/key.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;		None
  2175 ;; Auto vars:     Size  Location     Type
  2176 ;;		None
  2177 ;; Return value:  Size  Location     Type
  2178 ;;		None               void
  2179 ;; Registers used:
  2180 ;;		wreg
  2181 ;; Tracked objects:
  2182 ;;		On entry : 17F/0
  2183 ;;		On exit  : 17F/20
  2184 ;;		Unchanged: FFE80/0
  2185 ;; Data sizes:     COMMON   BANK0   BANK1
  2186 ;;      Params:         0       0       0
  2187 ;;      Locals:         0       0       0
  2188 ;;      Temps:          0       0       0
  2189 ;;      Totals:         0       0       0
  2190 ;;Total ram usage:        0 bytes
  2191 ;; Hardware stack levels used:    1
  2192 ;; This function calls:
  2193 ;;		Nothing
  2194 ;; This function is called by:
  2195 ;;		_main
  2196 ;; This function uses a non-reentrant model
  2197 ;;
  2198  05E8                     _SC12B_Init_Function:	
  2199                           
  2200                           ;key.c: 25: CMCON0 = 0x07 ;
  2201                           
  2202                           ; Regs used in _SC12B_Init_Function: [wreg]
  2203  05E8  3007               	movlw	7
  2204  05E9  0099               	movwf	25	;volatile
  2205                           
  2206                           ;key.c: 26: ANSELbits.ANS5 = 0;
  2207  05EA  1683               	bsf	3,5	;RP0=1, select bank1
  2208  05EB  1291               	bcf	17,5	;volatile
  2209                           
  2210                           ;key.c: 27: ANSELbits.ANS6=0;
  2211  05EC  1311               	bcf	17,6	;volatile
  2212  05ED  0008               	return
  2213  05EE                     __end_of_SC12B_Init_Function:	
  2214                           
  2215                           	psect	text416
  2216  05E3                     __ptext416:	
  2217 ;; =============== function _SC12B_Init_Function ends ============
  2218                           
  2219                           
  2220 ;; *************** function _BUZZER_Init *****************
  2221 ;; Defined at:
  2222 ;;		line 10 in file "hardware/src/buzzer.c"
  2223 ;; Parameters:    Size  Location     Type
  2224 ;;		None
  2225 ;; Auto vars:     Size  Location     Type
  2226 ;;		None
  2227 ;; Return value:  Size  Location     Type
  2228 ;;		None               void
  2229 ;; Registers used:
  2230 ;;		None
  2231 ;; Tracked objects:
  2232 ;;		On entry : 17F/0
  2233 ;;		On exit  : 17F/0
  2234 ;;		Unchanged: FFE80/0
  2235 ;; Data sizes:     COMMON   BANK0   BANK1
  2236 ;;      Params:         0       0       0
  2237 ;;      Locals:         0       0       0
  2238 ;;      Temps:          0       0       0
  2239 ;;      Totals:         0       0       0
  2240 ;;Total ram usage:        0 bytes
  2241 ;; Hardware stack levels used:    1
  2242 ;; This function calls:
  2243 ;;		Nothing
  2244 ;; This function is called by:
  2245 ;;		_System_Init
  2246 ;; This function uses a non-reentrant model
  2247 ;;
  2248  05E3                     _BUZZER_Init:	
  2249  05E3                     l6162:	
  2250                           ; Regs used in _BUZZER_Init: []
  2251                           
  2252                           
  2253                           ;buzzer.c: 11: TRISCbits.TRISC5 =0 ;
  2254  05E3  1683               	bsf	3,5	;RP0=1, select bank1
  2255  05E4  1287               	bcf	7,5	;volatile
  2256                           
  2257                           ;buzzer.c: 13: PORTCbits.RC5=0;
  2258  05E5  1283               	bcf	3,5	;RP0=0, select bank0
  2259  05E6  1287               	bcf	7,5	;volatile
  2260  05E7  0008               	return
  2261  05E8                     __end_of_BUZZER_Init:	
  2262                           
  2263                           	psect	text417
  2264  0000                     __ptext417:	
  2265 ;; =============== function _BUZZER_Init ends ============
  2266                           
  2267  007E                     btemp	set	126	;btemp
  2268  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Tue Jul 26 10:00:39 2022

                   __size_of_I2C_Delay 0006                     __size_of_I2C_Start 000D  
                                   _n0 002C                                     _n1 002D  
                                   _n2 002E                                     fsr 0004  
                                  l553 0000                                    l558 0000  
                         main@KeyValue 007C                                    u625 071B  
                                  u685 0707                                    u757 0697  
                                  u767 06B3                                    _WPU 0095  
                       ?_BackLight_Fun 0070                                    fsr0 0004  
                                  indf 0000                   __size_of_I2C_Respond 0012  
                                 l1114 0000                                   l1122 0000  
                                 l1117 05F0                                   l1125 0000  
                                 l1142 0000                                   l1119 0000  
                                 l1137 0000                                   l2431 0000  
                                 l4121 0000                                   l1842 07F3  
                                 l1852 068D                                   l3552 0000  
                                 l6202 0000                                   l1874 063A  
                                 l3555 0000                                   l6220 0777  
                                 l6212 0000                                   l6204 0000  
                                 l1876 0643                                   l6302 07F9  
                                 l6230 0000                                   l6214 0771  
                                 l6206 0000                                   l6232 0783  
                                 l6224 0000                                   l6208 076A  
                                 l6400 0000                                   l6162 05E3  
                                 l6170 05EE                                   l6250 0783  
                                 l6226 077D                                   l6218 0000  
                                 l6330 063B                                   l6402 0000  
                                 l6410 0000                                   l6164 0000  
                                 l6244 0783                                   l6180 074C  
                                 l6324 0000                                   l6340 0000  
                                 l6404 0000                                   l6412 0000  
                                 l6420 0000                                   l6500 0000  
                                 l6166 0000                                   l6262 0783  
                                 l6238 0783                                   l6190 0000  
                                 l6270 0784                                   l6334 0000  
                                 l6326 0000                                   l6342 0000  
                                 l6350 0000                                   l6406 0000  
                                 l6414 0000                                   l6430 0000  
                                 l6422 0000                                   l6502 0000  
                                 l6168 0000                                   l6176 0000  
                                 l6280 0000                                   l6256 0783  
                                 l6192 0000                                   l6184 0000  
                                 l6272 07D7                                   l6336 0000  
                                 l6328 0000                                   l6344 0000  
                                 l6360 0000                                   l6352 0000  
                                 l6408 0000                                   l6416 0000  
                                 l6440 0000                                   l6432 0000  
                                 l6520 0000                                   l6512 0000  
                                 l6504 0000                                   l6290 0000  
                                 l6282 0000                                   l6194 0000  
                                 l6186 0000                                   l6178 0000  
                                 l6346 0000                                   l6338 0000  
                                 l6370 0000                                   l6362 0000  
                                 l6354 0000                                   l6418 0000  
                                 l6442 0000                                   l6434 0000  
                                 l6522 0000                                   l6530 06F0  
                                 l6506 0000                                   l6292 07E9  
                                 l6284 0000                                   l6276 0000  
                                 l6196 0000                                   l6188 0000  
                                 l6372 0000                                   l6364 0000  
                                 l6356 0000                                   l6348 0000  
                                 l6380 0000                                   l6452 0000  
                                 l6444 0000                                   l6436 0000  
                                 l6428 0000                                   l6532 070F  
                                 l6516 06EF                                   l6508 0000  
                                 l6540 0000                                   l6286 0000  
                                 l6198 075D                                   l6374 0000  
                                 l6366 0000                                   l6358 0000  
                                 l6390 0000                                   l6382 0000  
                                 l6446 0000                                   l6438 0000  
                                 l6470 0000                                   l6462 0000  
                                 l6534 0000                                   l6526 070B  
                                 l6550 0000                                   l6542 0000  
                                 l6288 0000                                   l6376 0000  
                                 l6368 0000                                   l6384 0000  
                                 l6392 0000                                   l6456 073F  
                                 l6448 0000                                   l6472 0000  
                                 l6464 0000                                   l6552 0000  
                                 l6544 0000                                   l6560 0000  
                                 l6378 0000                                   l6386 0000  
                                 l6458 0000                                   l6466 0000  
                                 l6490 0000                                   l6474 0000  
                                 l6554 0000                                   l6546 068E  
                                 l6538 0000                                   l6562 0000  
                                 l6388 0000                                   l6468 0000  
                                 l6492 0000                                   l6484 0672  
                                 l6476 0000                                   l6556 0000  
                                 l6580 0000                                   l6572 0000  
                                 l6564 0000                                   l6398 06A5  
                                 l6494 0000                                   l6486 0000  
                                 l6478 0000                                   l6558 0000  
                                 l6574 06DD                                   l6566 06C7  
                                 l6680 07BE                                   l6672 07A1  
                                 l6488 0000                                   l6576 0000  
                                 l6682 07C3                                   l6674 07AF  
                                 l6578 06E0                                   l6684 07C8  
                                 l6676 07B4                                   l6686 07CD  
                                 l6678 07B9                                   l6688 07D2  
                                 _main 06C1                                   btemp 007E  
                         ?_BUZZER_Init 0070                       __end_of_I2C_Stop 0628  
                     __end_of_ADC_Init 0606                                   start 0000  
                 __size_of_System_Init 0002                       __end_of_LED_Init 066C  
                                ?_main 0070           __size_of_SC12B_Init_Function 0006  
                     ?_I2C_Receive8Bit 0070                      __end_of_I2C_Delay 05F4  
                                _run_t 0020                      __end_of_I2C_Start 0635  
                                status 0003                                  wtemp0 007E  
                         __end_of_main 06E3                        ??_BackLight_Fun 0070  
                               ??_main 007C            __size_of_SendByteAndGetNACK 003A  
                        ?_Buzzer_Sound 0070           ?_I2C_Simple_Read_From_Device 0075  
                               _ADCON0 001F                                 _CMCON0 0019  
                __end_of_RunCheck_Mode 0800                             _Motor_Init 0606  
                               clrloop 05F5                         ??_Buzzer_Sound 0073  
                            ?_I2C_Stop 0070                              ?_ADC_Init 0070  
             __size_of_BUZZER_KeySound 001E                    RunCheck_Mode@number 002A  
                            ?_LED_Init 0070                   __size_of_BUZZER_Init 0005  
                       __pcstackCOMMON 0070                           __pidataBANK0 0000  
                           ??_I2C_Stop 0071                             ??_ADC_Init 0070  
                           __pbssBANK0 0020                             ??_LED_Init 0070  
                           I2C_Delay@a 0070                    _SC12B_Init_Function 05E8  
 __size_of_I2C_Simple_Read_From_Device 002E                             __pmaintext 06C1  
                          ?_Motor_Init 0070                          ??_I2C_Respond 0071  
                 ?_SC12B_Init_Function 0070                                _SC_Data 002F  
                            _I2C_Delay 05EE                      ??_BUZZER_KeySound 0070  
                        ??_System_Init 0070                              _I2C_Start 0628  
                 __end_of_Buzzer_Sound 06A3                    SendByteAndGetNACK@i 0074  
                            _ANSELbits 0091                  ??_SC12B_Init_Function 0070  
         I2C_Simple_Read_From_Device@i 007B           I2C_Simple_Read_From_Device@p 007A  
                  __size_of_Motor_Init 000B                    __end_of_I2C_Respond 0658  
                 end_of_initialization 061A                             ?_I2C_Delay 0070  
                      RunCheck_Mode@k0 0031                        RunCheck_Mode@k1 0032  
                      RunCheck_Mode@k2 0033               __size_of_I2C_Receive8Bit 001A  
                           ?_I2C_Start 0070                    __end_of_System_Init 05E3  
                            _PORTAbits 0005                              _PORTCbits 0007  
           __end_of_SendByteAndGetNACK 074B                  __end_of_BackLight_Fun 0646  
                            _TRISAbits 0085                              _TRISCbits 0087  
                    __size_of_I2C_Stop 000C                      __size_of_ADC_Init 000A  
                    __size_of_LED_Init 0014                       I2C_Receive8Bit@i 0072  
                          _I2C_Respond 0646                    start_initialization 0611  
               __size_of_RunCheck_Mode 00B5                  __size_of_Buzzer_Sound 001D  
                          ??_I2C_Delay 0070                          ??_BUZZER_Init 0070  
                          ??_I2C_Start 0071                            _System_Init 05E1  
                         ??_Motor_Init 0070                      ??_I2C_Receive8Bit 0071  
                          __pdataBANK0 0031    __end_of_I2C_Simple_Read_From_Device 0711  
          _I2C_Simple_Read_From_Device 06E3                        _BUZZER_KeySound 06A3  
                         _Buzzer_Sound 0686                     __end_of_Motor_Init 0611  
        ??_I2C_Simple_Read_From_Device 0077           SendByteAndGetNACK@dataToSend 0073  
                        _RunCheck_Mode 074B                    __end_of_BUZZER_Init 05E8  
                            __ptext400 0686                              __ptext401 06E3  
                            __ptext410 0658                              __ptext402 05E1  
                            __ptext411 05FC                              __ptext403 066C  
                            __ptext412 0635                              __ptext404 0646  
                            __ptext413 074B                              __ptext405 0711  
                            __ptext414 05EE                              __ptext406 061C  
                            __ptext415 05E8                              __ptext407 0628  
                            __ptext416 05E3                              __ptext408 06A3  
                            __ptext417 0000                              __ptext409 0606  
                     BUZZER_KeySound@m 0071                               _I2C_Stop 061C  
                             _ADC_Init 05FC      I2C_Simple_Read_From_Device@target 0075  
                             _LED_Init 0658                         ?_RunCheck_Mode 0070  
          __end_of_SC12B_Init_Function 05EE                __end_of_BUZZER_KeySound 06C1  
                   _SendByteAndGetNACK 0711                            _BUZZER_Init 05E3  
                  ?_SendByteAndGetNACK 0070                          Buzzer_Sound@i 0076  
                    RunCheck_Mode@spec 002B                           ?_I2C_Respond 0070  
                 I2C_Respond@ACKSignal 0071                   ??_SendByteAndGetNACK 0071  
                      _I2C_Receive8Bit 066C                          __size_of_main 0022  
                         ?_System_Init 0070                        ??_RunCheck_Mode 0072  
                             clear_ram 05F4                 __size_of_BackLight_Fun 0011  
                I2C_Receive8Bit@buffer 0073  I2C_Simple_Read_From_Device@deviceAddr 0079  
                     ?_BUZZER_KeySound 0070                       RunCheck_Mode@dat 0070  
                     RunCheck_Mode@key 0029         I2C_Simple_Read_From_Device@len 0076  
                        _BackLight_Fun 0635                __end_of_I2C_Receive8Bit 0686  
